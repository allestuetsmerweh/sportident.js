{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/constants.js","webpack:///./src/utils.js","webpack:///./src/SiStation.js","webpack:///./src/SiCard.js","webpack:///./src/drivers/BaseDriver.js","webpack:///./src/drivers/WebUsb.js","webpack:///./src/drivers/index.js","webpack:///./src/SiMainStation.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","proto","STX","ETX","ACK","NAK","DLE","WAKEUP","basicCmd","SET_CARDNO","GET_SI5","SI5_WRITE","SI5_DET","TRANS_REC","TRANS_TIME","GET_SI6","SI6_DET","SET_MS","GET_MS","SET_SYS_VAL","GET_SYS_VAL","GET_BDATA","ERASE_BDATA","SET_TIME","GET_TIME","OFF","GET_BDATA2","SET_BAUD","basicCmdLookup","_basicCmdLookup","keys","map","k","cmd","GET_BACKUP","SRR_WRITE","SRR_READ","SRR_QUERY","SRR_PING","SRR_ADHOC","CLEAR_CARD","SET_SI6","SET_SI6_SPECIAL","SI_REM","SI8_DET","SET_SI8","GET_SI8","SIGNAL","cmdLookup","_cmdLookup","P_MS_DIRECT","P_MS_INDIRECT","P_SI6_CB","sysDataOffset","OLD_SERIAL","OLD_CPU_ID","SERIAL_NO","FIRMWARE","BUILD_DATE","MODEL_ID","MEM_SIZE","REFRESH_RATE","POWER_MODE","BAT_DATE","BAT_CAP","BACKUP_PTR","SI6_CB","BAT_STATE","MEM_OVERFLOW","INTERVAL","WTF","PROGRAM","MODE","STATION_CODE","PROTO","LAST_WRITE_DATE","LAST_WRITE_TIME","SLEEP_TIME","WORKING_TIME","M_CONTROL","M_START","M_FINISH","M_READ_SICARDS","M_CLEAR","M_CHECK","M_PRINTOUT","D_SUNDAY","D_MONDAY","D_TUESDAY","D_WEDNESDAY","D_THURSDAY","D_FRIDAY","D_SATURDAY","REC_LEN","T_OFFSET","T_CN","T_TIME","BC_CN","BC_TIME","_constants","isByte","byte","Number","Math","floor","arr2big","arr","outnum","length","Error","pow","prettyHex","arr2time","arr2date","secs","slice","Date","UTC","arr2cardNumber","cardnum","fourthSet","input","out","push","charCodeAt","toString","join","toUpperCase","Array","from","paddedStr","CRC16","str","concat","crc","val","j","processSiProto","inputData","command","parameters","undefined","splice","mode","len","crcContent","console","debug","warn","timeoutResolvePromise","timeout","arguments","Promise","resolve","_reject","setTimeout","timeoutRejectPromise","reason","_utils","SiStation","mainStation","_classCallCheck","this","_info","_infoTime","_infoSubscribers","force","_this","now","getTime","reject","_sendCommand","then","data","_raw","serialNumber","firmwareVersion","buildDate","deviceModel","modelLookup","memorySize","refreshRate","powerMode","batteryDate","batteryCapacity","backupPointer","siCard6Mode","memoryOverflow","interval","wtf","program","modeLookup","code","beeps","flashes","extendedProtocol","autoSend","handshake","sprint4ms","passwordOnly","stopOnFullBackup","autoReadout","lastWriteDate","autoOffTimeout","infoSubscriber","log","catch","_err","newTime","getHours","getMinutes","getSeconds","params","getFullYear","getMonth","getDate","getDay","getMilliseconds","countArg","count","paramsFunc","newValue","_this2","readInfo","info","newCode","newMode","newModeVal","newBeeps","newFlashes","newAutoSend","newExtendedProtocol","_modeLookup","Mode","_typeLookup","Type","_modelLookup","Model","vals","SIACSpecialFunction1","Control","Start","Finish","Readout","Clear","Check","Print","StartWithTimeTrigger","FinishWithTimeTrigger","BCControl","BCStart","BCFinish","BCSlave","Main","Sprint","Field","Master","BSF3","description","type","series","BSF4","BSF5","BSF6","BSF7","BSF8","BS7Master","BS8Master","BSM4","BSM6","BSM7","BSM8","BS7S","BS7P","BS7GSM","BS8P","SiCard","cardNumber","clearTime","checkTime","startTime","finishTime","punches","typeFromCN","typeByCardNumber","read","punch","time","replace","SICard5","card","cn","min","max","ind","SICard6","blk","SICard8","data0","assert","page0","data1","page1","SICard9","isLastBlock","SICard10","readSiCard10TimeBlock","blockData","punchData","blockIndex","punchCount","data4","page4","data5","page5","data6","page6","data7","page7","SICard11","readSiCard11TimeBlock","SIAC","readSIACTimeBlock","PCard","_card","TCard","FCard","borderList","borderLookup","lastEvenVal","borderExisted","collidingRange","BaseDriver","_MainStation","_mainStation","_buffer","_BaseDriver2","siDeviceFilters","vendorId","productId","WebUsb","MainStation","navigator","usb","requestDevice","filters","selectedDevice","allByDevice","ident","productName","driver","_device","_this3","getDevices","devices","device","findIndex","filter","dev","_receiveLoop","transferIn","response","bufView","Uint8Array","buffer","_logReceive","_respBuffer","_processReceiveBuffer","err","_remove","open","reset","selectConfiguration","claimInterface","selectAlternateInterface","controlTransferOut","requestType","recipient","request","index","releaseInterface","close","transferOut","default","_SiCard","_SiStation2","drivers","SendTask","numResponses","state","State","QUEUED","timeoutTimer","SENT","responses","fail","succeed","SUCCEEDED","clearTimeout","FAILED","SiMainStation","Closed","_possibleConstructorReturn","__proto__","getPrototypeOf","onRemoved","onStateChanged","onCardInserted","onCard","onCardRemoved","_sendQueue","_deviceOpenTimer","_deviceOpenNumErrors","onAdded","_deviceOpen","f","args","newState","_changeState","Opening","Starting","Ready","error","_retryDeviceOpen","_this4","scheduleReopen","_this5","continueProcessing","message","_dispatch","transRecordCard","addResponse","_this6","_processSendQueue","sendTask","commandString","String","fromCharCode","bstr","bytes","send","numRespArg","timeoutArg","_this7","resolvedTask","shift","rejectedTask","all","deviceIdent","startDeviceDetection","runDeviceDetection","detect","detectionTimeout","newDevice","new","_ms","constants","utils","_SiStation","_SiMainStation","si","Station","Card","onLoad","window","addEventListener"],"mappings":"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","file":"si.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","export const proto = {\n    // Protocol characters\n    STX: 0x02,\n    ETX: 0x03,\n    ACK: 0x06, // when sent to BSx3..6, causes beep until SI-card taken out\n    NAK: 0x15,\n    DLE: 0x10,\n    WAKEUP: 0xFF,\n\n    // Basic protocol commands, currently unused\n    basicCmd: {\n        SET_CARDNO: 0x30,\n        GET_SI5: 0x31, // read out SI-card 5 data\n        SI5_WRITE: 0x43, // 02 43 (block: 0x30 to 0x37) (16 bytes) 03\n        SI5_DET: 0x46, // SI-card 5 inserted (46 49) or removed (46 4F)\n        TRANS_REC: 0x53, // autosend timestamp (online control)\n        TRANS_TIME: 0x54, // autosend timestamp (lightbeam trigger)\n        GET_SI6: 0x61, // read out SI-card 6 data\n        SI6_DET: 0x66, // SI-card 6 inserted\n        SET_MS: 0x70, // \\x4D=\"M\"aster, \\x53=\"S\"lave\n        GET_MS: 0x71,\n        SET_SYS_VAL: 0x72,\n        GET_SYS_VAL: 0x73,\n        GET_BDATA: 0x74, // Note: response carries '\\xC4'!\n        ERASE_BDATA: 0x75,\n        SET_TIME: 0x76,\n        GET_TIME: 0x77,\n        OFF: 0x78,\n        GET_BDATA2: 0x7A, // Note: response carries '\\xCA'!\n        SET_BAUD: 0x7E, // 0=4800 baud, 1=38400 baud\n    },\n    basicCmdLookup: () => {\n        if (proto._basicCmdLookup) {\n            return proto._basicCmdLookup;\n        }\n        proto._basicCmdLookup = {};\n        Object.keys(proto.basicCmd).map((k) => {\n            proto._basicCmdLookup[proto.basicCmd[k]] = k;\n        });\n        return proto._basicCmdLookup;\n    },\n\n    // Extended protocol commands\n    cmd: {\n        GET_BACKUP: 0x81,\n        SET_SYS_VAL: 0x82,\n        GET_SYS_VAL: 0x83,\n        SRR_WRITE: 0xA2, // ShortRangeRadio - SysData write\n        SRR_READ: 0xA3, // ShortRangeRadio - SysData read\n        SRR_QUERY: 0xA6, // ShortRangeRadio - network device query\n        SRR_PING: 0xA7, // ShortRangeRadio - heartbeat from linked devices, every 50 seconds\n        SRR_ADHOC: 0xA8, // ShortRangeRadio - ad-hoc message, f.ex. from SI-ActiveCard\n        GET_SI5: 0xB1, // read out SI-card 5 data\n        TRANS_REC: 0xD3, // autosend timestamp (online control)\n        CLEAR_CARD: 0xE0, // found on SI-dev-forum: 02 E0 00 E0 00 03 (http://www.sportident.com/en/forum/8/56#59)\n        GET_SI6: 0xE1, // read out SI-card 6 data block\n        SET_SI6: 0xE2, // write SI-card 6 line (16 bytes)\n        SET_SI6_SPECIAL: 0xE4, // write SI-card 6 special fields (e.g. start number)\n        SI5_DET: 0xE5, // SI-card 5 inserted\n        SI6_DET: 0xE6, // SI-card 6 inserted\n        SI_REM: 0xE7, // SI-card removed\n        SI8_DET: 0xE8, // SI-card 8/9/10/11/p/t inserted\n        SET_SI8: 0xEA, // write SI-card 8/9/10/11/p/t data word\n        GET_SI8: 0xEF, // read out SI-card 8/9/10/11/p/t data block\n        SET_MS: 0xF0, // \\x4D=\"M\"aster, \\x53=\"S\"lave\n        GET_MS: 0xF1,\n        ERASE_BDATA: 0xF5,\n        SET_TIME: 0xF6,\n        GET_TIME: 0xF7,\n        OFF: 0xF8,\n        SIGNAL: 0xF9, // 02 F9 (number of signals) (CRC16) 03\n        SET_BAUD: 0xFE, // \\x00=4800 baud, \\x01=38400 baud\n    },\n    cmdLookup: () => {\n        if (proto._cmdLookup) {\n            return proto._cmdLookup;\n        }\n        proto._cmdLookup = {};\n        Object.keys(proto.cmd).map((k) => {\n            proto._cmdLookup[proto.cmd[k]] = k;\n        });\n        return proto._cmdLookup;\n    },\n\n    // Protocol Parameters\n    P_MS_DIRECT: 0x4D, // \"M\"aster\n    P_MS_INDIRECT: 0x53, // \"S\"lave\n    P_SI6_CB: 0x08,\n\n    // offsets in system data\n    // currently only O_MODE, O_STATION_CODE and O_PROTO are used\n    sysDataOffset: {\n        OLD_SERIAL: 0x00, // 2 bytes - only up to BSx6, numbers < 65.536\n        OLD_CPU_ID: 0x02, // 2 bytes - only up to BSx6, numbers < 65.536\n        SERIAL_NO: 0x00, // 4 bytes - only after BSx7, numbers > 70.000 (if byte 0x00 > 0, better use OLD offsets)\n        FIRMWARE: 0x05, // 3 bytes\n        BUILD_DATE: 0x08, // 3 bytes - YYMMDD\n        MODEL_ID: 0x0B, // 2 bytes:\n        //   8003: BSF3 (serial numbers > 1.000)\n        //   8004: BSF4 (serial numbers > 10.000)\n        //   8084: BSM4-RS232\n        //   8086: BSM6-RS232 / BSM6-USB\n        //   8146: BSF6 (serial numbers > 30.000)\n        //   8115: BSF5 (serial numbers > 50.000)\n        //   8117 / 8118: BSF7 / BSF8 (serial no. 70.000...70.521, 72.002...72.009)\n        //   8187 / 8188: BS7-SI-Master / BS8-SI-Master\n        //   8197: BSF7 (serial numbers > 71.000, apart from 72.002...72.009)\n        //   8198: BSF8 (serial numbers > 80.000)\n        //   9197 / 9198: BSM7-RS232, BSM7-USB / BSM8-USB, BSM8-SRR\n        //   9199: unknown\n        //   9597: BS7-S\n        //   B197 / B198: BS7-P / BS8-P\n        //   B897: BS7-GSM\n        MEM_SIZE: 0x0D, // 1 byte - in KB\n        REFRESH_RATE: 0x10, // 1 byte - in 3/sec\n        POWER_MODE: 0x11, // 1 byte - 06 low power, 08 standard/sprint\n\n        BAT_DATE: 0x15, // 3 bytes - YYMMDD\n        BAT_CAP: 0x19, // 2 bytes - battery capacity in mAh (as multiples of 14.0625?!)\n        BACKUP_PTR: 0x1C, // 4 bytes - at positions 1C,1D,21,22\n        SI6_CB: 0x33, // 1 byte - bitfield defining which SI Card 6 blocks to read: \\x00=\\xC1=read block0,6,7; \\x08=\\xFF=read all 8 blocks\n        BAT_STATE: 0x34, // 4 bytes - for battery state: 2000mAh: 000000=0%, 6E0000=100%, 1000mAh:000000=0%, 370000=100%\n        MEM_OVERFLOW: 0x3D, // 1 byte - memory overflow if != 0x00\n\n        INTERVAL: 0x48, // 2 bytes - in 32*ms\n        WTF: 0x4A, // 2 bytes - in 32*ms\n\n        PROGRAM: 0x70, // 1 byte - station program: xx0xxxxxb competition, xx1xxxxxb training\n        MODE: 0x71, // 1 byte - see SI station modes below\n        STATION_CODE: 0x72, // 1 byte\n        PROTO: 0x74, // 1 byte - protocol configuration, bit mask value:\n        //   xxxxxxx1b extended protocol\n        //   xxxxxx1xb auto send out\n        //   xxxxx1xxb handshake (only valid for card readout)\n        //   xxxx1xxxb sprint 4ms (only for Start&Finish modes)\n        //   xxx1xxxxb access with password only\n        //   xx1xxxxxb stop, if backup is full (only for Readout mode)\n        //   1xxxxxxxb read out SI-card after punch (only for punch modes;\n        //             depends on bit 2: auto send out or handshake)\n        LAST_WRITE_DATE: 0x75, // 3 bytes - YYMMDD\n        LAST_WRITE_TIME: 0x78, // 3 bytes - 1 byte day (see below), 2 bytes seconds after midnight/midday\n        SLEEP_TIME: 0x7B, // 3 bytes - 1 byte day (see below), 2 bytes seconds after midnight/midday\n        //   xxxxxxx0b - seconds relative to midnight/midday: 0 = am, 1 = pm\n        //   xxxx000xb - day of week: 000 = Sunday, 110 = Saturday\n        //   xx00xxxxb - week counter 0..3, relative to programming date\n        WORKING_TIME: 0x7E, // 2 bytes - big endian number = minutes\n    },\n\n    // SI station modes\n    M_CONTROL: 0x02,\n    M_START: 0x03,\n    M_FINISH: 0x04,\n    M_READ_SICARDS: 0x05,\n    M_CLEAR: 0x07,\n    M_CHECK: 0x0A,\n    M_PRINTOUT: 0x0B,\n\n    // Weekday encoding (only for reference, currently unused)\n    D_SUNDAY: 0b000,\n    D_MONDAY: 0b001,\n    D_TUESDAY: 0b010,\n    D_WEDNESDAY: 0b011,\n    D_THURSDAY: 0b100,\n    D_FRIDAY: 0b101,\n    D_SATURDAY: 0b110,\n\n    // Backup memory record length\n    REC_LEN: 8, // Only in extended protocol, otherwise 6!\n\n    // punch trigger in control mode data structure\n    T_OFFSET: 8,\n    T_CN: 0,\n    T_TIME: 5,\n\n    // backup memory in control mode\n    BC_CN: 3,\n    BC_TIME: 8,\n};\n","import {proto} from './constants';\n\nexport const isByte = (byte) => (\n    Number(byte) === byte &&\n    Math.floor(byte) === byte &&\n    byte < 0x100\n);\n\nexport const arr2big = (arr) => {\n    var outnum = 0;\n    for (var i = 0; i < arr.length; i++) {\n        const byte = arr[i];\n        if (!isByte(byte)) {\n            throw new Error('Array elements need to be bytes');\n        }\n        outnum += byte * Math.pow(0x100, arr.length - i - 1);\n    }\n    return outnum;\n};\n\nexport const arr2time = (arr) => {\n    if (arr.length !== 2) {\n        throw new Error(`arr2time: length must be 2, but is ${arr.length}`);\n    }\n    if (arr[0] === 0xEE && arr[1] === 0xEE) {\n        return null;\n    }\n    return arr2big(arr);\n};\n\nexport const arr2date = (arr) => {\n    if (arr.length === 7 || arr.length === 6) {\n        var secs = arr2big(arr.slice(4, 6));\n        return new Date(Date.UTC(\n            arr[0] + 2000,\n            arr[1] - 1,\n            arr[2],\n            (arr[3] & 0x01) * 12 + Math.floor(secs / 3600),\n            Math.floor((secs % 3600) / 60),\n            secs % 60,\n            (arr.length === 7 ? arr[6] * 1000 / 256 : 0),\n        ));\n    } else if (arr.length === 3) {\n        return new Date(Date.UTC(\n            2000 + arr[0],\n            arr[1] - 1,\n            arr[2],\n        ));\n    }\n    throw new Error(`arr2date: length must be 3, 6 or 7, but is ${arr.length}`);\n};\n\nexport const arr2cardNumber = (arr) => {\n    if (arr.length === 4 || arr.length === 3) {\n        var cardnum = (arr[1] << 8) | arr[0];\n        var fourthSet = (arr.length === 4 && arr[3] !== 0x00);\n        if (!fourthSet && 1 < arr[2] && arr[2] <= 4) {\n            cardnum += (arr[2] * 100000);\n        } else if (fourthSet || 4 < arr[2]) {\n            cardnum += (arr[2] << 16);\n        }\n        if (arr.length === 4) {\n            cardnum |= (arr[3] << 24);\n        }\n        return cardnum;\n    }\n    throw new Error(`arr2cardNumber: length must be 3 or 4, but is ${arr.length}`);\n};\n\nexport const prettyHex = (input) => {\n    if (typeof input === 'string') {\n        const out = [];\n        let i;\n        for (i = 0; i < input.length; i++) {\n            out.push((`00${input.charCodeAt(i).toString(16)}`).slice(-2));\n        }\n        return out.join(' ').toUpperCase();\n    }\n    return Array.from(input)\n        .map((byte) => `00${byte.toString(16)}`)\n        .map((paddedStr) => paddedStr.slice(-2))\n        .join(' ').toUpperCase();\n};\n\nexport const CRC16 = (str) => {\n    var CRC_POLYNOM = 0x8005;\n    var CRC_BITF = 0x8000;\n    if (str.length < 3) {\n        return [(1 <= str.length ? str[0] : 0x00), (2 <= str.length ? str[1] : 0x00)];\n    }\n    const s = str.length % 2 === 0 ? str.concat([0x00, 0x00]) : str.concat([0x00]);\n    var crc = s[0] * 0x100 + s[1];\n    for (var i = 2; i < s.length; i += 2) {\n        var c = s.slice(i, i + 2);\n        var val = c[0] * 0x100 + c[1];\n        for (var j = 0; j < 16; j++) {\n            if ((crc & CRC_BITF) !== 0) {\n                crc = (crc << 1);\n                if ((val & CRC_BITF) !== 0) {\n                    crc += 1;\n                }\n                crc = (crc ^ CRC_POLYNOM);\n            } else {\n                crc = (crc << 1);\n                if ((val & CRC_BITF) !== 0) {\n                    crc += 1;\n                }\n            }\n            val = (val << 1);\n        }\n        crc = (crc & 0xFFFF);\n    }\n    return [(crc >> 8), (crc & 0xFF)];\n};\n\nexport const processSiProto = (inputData) => {\n    let command, parameters;\n    while (command === undefined) {\n        if (inputData.length === 0) {\n            return null;\n        }\n        if (inputData[0] === proto.ACK) {\n            inputData.splice(0, 1);\n            continue; // eslint-disable-line no-continue\n        }\n        if (inputData[0] === proto.NAK) {\n            inputData.splice(0, 1);\n            return {\n                mode: proto.NAK,\n                command: null,\n                parameters: [],\n            };\n        }\n        if (inputData[0] === proto.WAKEUP) {\n            inputData.splice(0, 1);\n            continue; // eslint-disable-line no-continue\n        }\n        if (inputData[0] !== proto.STX) {\n            console.warn(`Invalid start byte: ${prettyHex([inputData[0]])}`);\n            inputData.splice(0, 1);\n            continue; // eslint-disable-line no-continue\n        }\n        if (inputData.length < 6) {\n            return null;\n        }\n        command = inputData[1];\n        var len = inputData[2];\n        if (inputData.length < 6 + len) {\n            return null;\n        }\n        if (inputData[5 + len] !== proto.ETX) {\n            console.warn(`Invalid end byte: ${prettyHex([inputData[5 + len]])}`);\n            inputData.splice(0, 1);\n            continue; // eslint-disable-line no-continue\n        }\n        parameters = inputData.slice(3, 3 + len);\n        var crcContent = CRC16(inputData.slice(1, 3 + len));\n        var crc = inputData.slice(3 + len, 5 + len);\n        inputData.splice(0, 6 + len);\n        if (crc[0] !== crcContent[0] || crc[1] !== crcContent[1]) {\n            console.debug(`Invalid Command received.\n    CMD:0x${prettyHex([command])}\n    LEN:${len}\n    PARAMS:${prettyHex(parameters)}\n    CRC:${prettyHex(crc)}\n    Content-CRC:${prettyHex(crcContent)}`);\n            continue; // eslint-disable-line no-continue\n        }\n    }\n    return {\n        mode: proto.STX,\n        command: command,\n        parameters: parameters,\n    };\n};\n\nexport const timeoutResolvePromise = (value, timeout = 1) =>\n    new Promise((resolve, _reject) =>\n        setTimeout(() => resolve(value), timeout));\n\nexport const timeoutRejectPromise = (reason, timeout) =>\n    new Promise((resolve, _reject) =>\n        setTimeout(() => resolve(reason), timeout));\n","import {arr2big, arr2date, timeoutResolvePromise} from './utils';\nimport {proto} from './constants';\n\nexport class SiStation {\n    constructor(mainStation) {\n        this.mainStation = mainStation;\n        this._info = {};\n        this._infoTime = 0;\n        this._infoSubscribers = [];\n    }\n\n    static modeLookup() {\n        if (SiStation._modeLookup) { return SiStation._modeLookup; }\n        SiStation._modeLookup = {};\n        Object.keys(SiStation.Mode).map((k) => {\n            SiStation._modeLookup[SiStation.Mode[k].val] = k;\n        });\n        return SiStation._modeLookup;\n    }\n\n    static typeLookup() {\n        if (SiStation._typeLookup) { return SiStation._typeLookup; }\n        SiStation._typeLookup = {};\n        Object.keys(SiStation.Type).map((k) => {\n            SiStation._typeLookup[SiStation.Type[k].val] = k;\n        });\n        return SiStation._typeLookup;\n    }\n\n    static modelLookup() {\n        if (SiStation._modelLookup) { return SiStation._modelLookup; }\n        SiStation._modelLookup = {};\n        Object.keys(SiStation.Model).map((k) => {\n            SiStation.Model[k].vals.map((val) => {\n                SiStation._modelLookup[val] = k;\n            });\n        });\n        return SiStation._modelLookup;\n    }\n\n    readInfo(force) {\n        var now = new Date().getTime();\n        if (!force && now < this._infoTime + 60000) {\n            return timeoutResolvePromise(this._info);\n        }\n        if (!force && 0 < this._infoSubscribers.length) {\n            return new Promise((resolve, reject) => {\n                this._infoSubscribers.push({resolve: resolve, reject: reject});\n            });\n        }\n        return this.mainStation._sendCommand(proto.cmd.GET_SYS_VAL, [0x00, 0x80], 1)\n            .then((d) => {\n                const data = d[0];\n                data.splice(0, 3);\n                this._infoTime = new Date().getTime();\n                this._info = {};\n                this._info._raw = data;\n                this._info.serialNumber = arr2big(data.slice(0x00, 0x04));\n                this._info.firmwareVersion = arr2big(data.slice(0x05, 0x08));\n                this._info.buildDate = arr2date(data.slice(0x08, 0x0B));\n                this._info.deviceModel = SiStation.modelLookup()[arr2big(data.slice(0x0B, 0x0D))];\n                this._info.memorySize = arr2big(data.slice(0x0D, 0x0E));\n                this._info.refreshRate = data[0x10]; // in 3/sec\n                this._info.powerMode = data[0x11]; // 06 low power, 08 standard/sprint\n                this._info.batteryDate = arr2date(data.slice(0x15, 0x18));\n                this._info.batteryCapacity = arr2big(data.slice(0x19, 0x1B));\n                this._info.backupPointer = arr2big(data.slice(0x1C, 0x1E).concat(data.slice(0x21, 0x23)));\n                this._info.siCard6Mode = arr2big(data.slice(0x33, 0x34));\n                this._info.memoryOverflow = arr2big(data.slice(0x3D, 0x3E));\n                this._info.interval = arr2big(data.slice(0x48, 0x4A));\n                this._info.wtf = arr2big(data.slice(0x4A, 0x4C));\n                this._info.program = data[0x70];\n                this._info.mode = SiStation.modeLookup()[data[0x71]];\n                this._info.code = data[0x72] + ((data[0x73] & 0xC0) << 2);\n                this._info.beeps = ((data[0x73] >> 2) & 0x01);\n                this._info.flashes = (data[0x73] & 0x01);\n                this._info.extendedProtocol = (data[0x74] & 0x01);\n                this._info.autoSend = ((data[0x74] >> 1) & 0x01);\n                this._info.handshake = ((data[0x74] >> 2) & 0x01);\n                this._info.sprint4ms = ((data[0x74] >> 3) & 0x01);\n                this._info.passwordOnly = ((data[0x74] >> 4) & 0x01);\n                this._info.stopOnFullBackup = ((data[0x74] >> 5) & 0x01);\n                this._info.autoReadout = ((data[0x74] >> 7) & 0x01);\n                this._info.lastWriteDate = arr2date(data.slice(0x75, 0x7B));\n                // this._info.autoOffTimeout = arr2date([0, 1, 1].concat(data.slice(0x7B, 0x7E)));\n                this._info.autoOffTimeout = arr2big(data.slice(0x7E, 0x80));\n                this._infoSubscribers.map((infoSubscriber) => setTimeout(() => infoSubscriber.resolve(this._info), 1));\n                this._infoSubscribers = [];\n                console.log('INFO READ', this._info);\n                return this._info;\n            })\n            .catch((_err) => {\n                this._infoSubscribers.map((infoSubscriber) => setTimeout(() => infoSubscriber.reject(), 1));\n                this._infoSubscribers = [];\n                throw new Error('READ INFO');\n            });\n    }\n\n    time(newTime) {\n        if (newTime === undefined) {\n            return this.mainStation._sendCommand(proto.cmd.GET_TIME, [], 1)\n                .then((d) => arr2date(d[0].slice(2)));\n        }\n        // TODO: compensate for waiting time\n        var secs = (newTime.getHours() % 12) * 3600 + newTime.getMinutes() * 60 + newTime.getSeconds();\n        var params = [\n            newTime.getFullYear() % 100,\n            newTime.getMonth() + 1,\n            newTime.getDate(),\n            (newTime.getDay() << 1) + Math.floor(newTime.getHours() / 12),\n            secs >> 8,\n            secs & 0xFF,\n            Math.floor(newTime.getMilliseconds() * 256 / 1000),\n        ];\n        return this.mainStation._sendCommand(proto.cmd.SET_TIME, params, 1)\n            .then((d) => arr2date(d[0].slice(2)));\n\n    }\n\n    signal(countArg) {\n        const count = !countArg || countArg < 1 ? 1 : countArg;\n        return this.mainStation._sendCommand(proto.cmd.SIGNAL, [count], 1)\n            .then((data) => {\n                if (data[0][2] !== count) {\n                    throw new Error('NUM BEEPS');\n                }\n            });\n    }\n\n    powerOff() { // Does not power off BSM8 (USB powered), though\n        return this.mainStation._sendCommand(proto.cmd.OFF, [], 0);\n    }\n\n    info(property, paramsFunc, newValue) {\n        if (newValue === undefined) {\n            return this.readInfo(false)\n                .then((info) => info[property]);\n        }\n        let params = undefined;\n        return this.readInfo(false)\n            .then((info) => {\n                params = paramsFunc(info);\n                if (!params) {\n                    throw new Error('INVALID_PARAM');\n                }\n                return this.mainStation._sendCommand(proto.cmd.SET_SYS_VAL, params, 1);\n            })\n            .then((d) => {\n                const data = d[0];\n                data.splice(0, 2);\n                if (data[0] !== params[0]) {\n                    throw new Error('SET_CODE_RESP_ERR');\n                }\n                return this.readInfo(true);\n            })\n            .then((info) => info[property]);\n    }\n\n    // TODO: program (0x70)\n\n    code(newCode) {\n        return this.info('code', (info) => [0x72, newCode & 0xFF, ((newCode & 0x0300) >> 2) + (info._raw[0x73] & 0x3F)], newCode);\n    }\n\n    mode(newMode) {\n        return this.info('mode', (_info) => {\n            const modeLookup = SiStation.modeLookup();\n            const newModeVal = newMode.hasOwnProperty('val') ? newMode.val : newMode;\n            if (modeLookup[newModeVal] === undefined) {\n                return false;\n            }\n            return [0x71, newModeVal];\n        }, newMode);\n    }\n\n    beeps(newBeeps) {\n        return this.info('beeps', (info) => [0x73, (newBeeps ? 0x04 : 0x00) + (info._raw[0x73] & 0xFB)], newBeeps);\n    }\n\n    flashes(newFlashes) {\n        return this.info('flashes', (info) => [0x73, (newFlashes ? 0x01 : 0x00) + (info._raw[0x73] & 0xFE)], newFlashes);\n    }\n\n    autoSend(newAutoSend) {\n        return this.info('autoSend', (info) => [0x74, (newAutoSend ? 0x02 : 0x00) + (info._raw[0x74] & 0xFD)], newAutoSend);\n    }\n\n    extendedProtocol(newExtendedProtocol) {\n        return this.info('extendedProtocol', (info) => [0x74, (newExtendedProtocol ? 0x01 : 0x00) + (info._raw[0x74] & 0xFE)], newExtendedProtocol);\n    }\n\n    serialNumber() {\n        return this.info('serialNumber', () => false, undefined);\n    }\n\n    firmwareVersion() {\n        return this.info('firmwareVersion', () => false, undefined);\n    }\n\n    buildDate() {\n        return this.info('buildDate', () => false, undefined);\n    }\n\n    deviceModel() {\n        return this.info('deviceModel', () => false, undefined);\n    }\n\n    memorySize() {\n        return this.info('memorySize', () => false, undefined);\n    }\n\n    batteryDate() {\n        return this.info('batteryDate', () => false, undefined);\n    }\n\n    batteryCapacity() {\n        return this.info('batteryCapacity', () => false, undefined);\n    }\n\n    backupPointer() {\n        return this.info('backupPointer', () => false, undefined);\n    }\n\n    siCard6Mode() {\n        return this.info('siCard6Mode', () => false, undefined);\n    }\n\n    memoryOverflow() {\n        return this.info('memoryOverflow', () => false, undefined);\n    }\n\n    lastWriteDate() {\n        return this.info('lastWriteDate', () => false, undefined);\n    }\n\n    autoOffTimeout() {\n        return this.info('autoOffTimeout', () => false, undefined);\n    }\n}\nSiStation.Mode = {\n    SIACSpecialFunction1: {val: 0x01},\n    Control: {val: 0x02},\n    Start: {val: 0x03},\n    Finish: {val: 0x04},\n    Readout: {val: 0x05},\n    Clear: {val: 0x07},\n    Check: {val: 0x0A},\n    Print: {val: 0x0B},\n    StartWithTimeTrigger: {val: 0x0C},\n    FinishWithTimeTrigger: {val: 0x0D},\n    BCControl: {val: 0x12},\n    BCStart: {val: 0x13},\n    BCFinish: {val: 0x14},\n    BCSlave: {val: 0x1F},\n};\n\nSiStation.Type = { // TODO: meaningful val-s\n    Main: {val: 0x00},\n    Sprint: {val: 0x01},\n    Print: {val: 0x02},\n    Field: {val: 0x03},\n    Master: {val: 0x04},\n};\n\nSiStation.Model = {\n    BSF3: {vals: [0x8003], description: 'BSF3', type: SiStation.Type.Field, series: 3},\n    BSF4: {vals: [0x8004], description: 'BSF4', type: SiStation.Type.Field, series: 4},\n    BSF5: {vals: [0x8115], description: 'BSF5', type: SiStation.Type.Field, series: 5},\n    BSF6: {vals: [0x8146], description: 'BSF6', type: SiStation.Type.Field, series: 6},\n    BSF7: {vals: [0x8117, 0x8197], description: 'BSF7', type: SiStation.Type.Field, series: 7},\n    BSF8: {vals: [0x8118, 0x8198], description: 'BSF8', type: SiStation.Type.Field, series: 8},\n    BS7Master: {vals: [0x8187], description: 'BS7-Master', type: SiStation.Type.Master, series: 7},\n    BS8Master: {vals: [0x8188], description: 'BS8-Master', type: SiStation.Type.Master, series: 8},\n    BSM4: {vals: [0x8084], description: 'BSM4', type: SiStation.Type.Main, series: 4},\n    BSM6: {vals: [0x8086], description: 'BSM6', type: SiStation.Type.Main, series: 6},\n    BSM7: {vals: [0x9197], description: 'BSM7', type: SiStation.Type.Main, series: 7},\n    BSM8: {vals: [0x9198], description: 'BSM8', type: SiStation.Type.Main, series: 8},\n    BS7S: {vals: [0x9597], description: 'BS7-S', type: SiStation.Type.Sprint, series: 7},\n    BS7P: {vals: [0xB197], description: 'BS7-P', type: SiStation.Type.Print, series: 7},\n    BS7GSM: {vals: [0xB897], description: 'BS7-GSM', type: SiStation.Type.Field, series: 7},\n    BS8P: {vals: [0xB198], description: 'BS8-P', type: SiStation.Type.Print, series: 8},\n};\n","import {arr2big, arr2time} from './utils';\nimport {proto} from './constants';\n\nexport class SiCard {\n    constructor(mainStation, cardNumber) {\n        this.mainStation = mainStation;\n        this.cardNumber = cardNumber;\n        this.clearTime = -1;\n        this.checkTime = -1;\n        this.startTime = -1;\n        this.finishTime = -1;\n        this.punches = [];\n    }\n\n    read() {\n        var typeFromCN = SiCard.typeByCardNumber(this.cardNumber);\n        return SiCard.Type[typeFromCN].read(this);\n    }\n\n    type() {\n        return SiCard.typeByCardNumber(this.cardNumber);\n    }\n\n    toDict() {\n        return {\n            cardNumber: this.cardNumber,\n            clearTime: this.clearTime,\n            checkTime: this.checkTime,\n            startTime: this.startTime,\n            finishTime: this.finishTime,\n            punches: this.punches,\n        };\n    }\n\n    toString() {\n        return `${this.type()} Number: ${this.cardNumber}\nClear: ${this.clearTime}\nCheck: ${this.checkTime}\nStart: ${this.startTime}\nFinish: ${this.finishTime}\n${this.punches.map((punch) => `${punch.code}: ${punch.time}`).join('\\n')}\n`;\n    }\n\n    toHtml() {\n        return this.toString().replace(/\\n/g, '<br />');\n    }\n}\nSiCard.Type = {\n    SICard5: {\n        vals: [1000, 500000],\n        description: 'SI Card 5',\n        read: (card) => card.mainStation._sendCommand(proto.cmd.GET_SI5, [], 1)\n            .then((d) => {\n                const data = d[0];\n                data.splice(0, 2);\n                var cn = arr2big([data[6], data[4], data[5]]);\n                if (499999 < cn) { console.warn(`SICard5 Error: SI Card Number inconsistency: SI5 detected, but number is ${cn} (not in 0 - 500'000)`); }\n                if (data[6] < 2) {\n                    cn = arr2big([data[4], data[5]]);\n                } else {\n                    cn = data[6] * 100000 + arr2big([data[4], data[5]]);\n                }\n                if (card.cardNumber !== cn) { console.warn('SICard5 Error: SI Card Number inconsistency'); }\n\n                card.startTime = arr2time(data.slice(19, 21));\n                card.finishTime = arr2time(data.slice(21, 23));\n                card.checkTime = arr2time(data.slice(25, 27));\n                // TODO: also read the 6(?) additional punch codes without times\n                var len = Math.min(Math.max(data[23] - 1, 0), 30);\n                card.punches = new Array(len);\n                var ind = 32;\n                for (var i = 0; i < len; i++) {\n                    if ((ind % 16) === 0) {\n                        ind++;\n                    }\n                    var time = arr2time(data.slice(ind + 1, ind + 3));\n                    if (0 <= time) {\n                        card.punches[i] = {code: data[ind + 0], time: time};\n                    } else {\n                        console.warn('SICard5 Error: Undefined Time in punched range');\n                    }\n                    ind += 3;\n                }\n                card.mainStation._sendCommand(proto.ACK, [], 0);\n                return card;\n            }),\n    },\n    SICard6: {\n        vals: [500000, 1000000, 2003000, 2004000],\n        description: 'SI Card 6',\n        read: (card) => card.mainStation._sendCommand(proto.cmd.GET_SI6, [0x08], 3)\n            .then((data) => {\n                if (data[0][2] !== 0) { console.warn(`SICard6 Error: First read block is ${data[0][2]} (expected 0)`); }\n                if (data[1][2] !== 6) { console.warn(`SICard6 Error: Second read block is ${data[1][2]} (expected 6)`); }\n                if (data[2][2] !== 7) { console.warn(`SICard6 Error: Third read block is ${data[2][2]} (expected 7)`); }\n                data[0].splice(0, 3);\n                data[1].splice(0, 3);\n                data[2].splice(0, 3);\n                var cn = arr2big([data[0][11], data[0][12], data[0][13]]);\n                if (card.cardNumber !== cn) { console.warn('SICard6 Error: SI Card Number inconsistency'); }\n\n                card.startTime = arr2time(data[0].slice(26, 28));\n                card.finishTime = arr2time(data[0].slice(22, 24));\n                card.checkTime = arr2time(data[0].slice(30, 32));\n                card.clearTime = arr2time(data[0].slice(34, 36));\n                var len = Math.min(Math.max(data[0][18] - 1, 0), 64);\n                card.punches = new Array(len);\n                var blk = 1;\n                var ind = 0;\n                for (var i = 0; i < len; i++) {\n                    if (128 <= ind) {\n                        blk++;\n                        ind = 0;\n                    }\n                    var time = arr2time(data[blk].slice(ind + 2, ind + 4));\n                    if (0 <= time) {\n                        card.punches[i] = {code: data[blk][ind + 1], time: time};\n                    } else {\n                        console.warn('SICard6 Error: Undefined Time in punched range');\n                    }\n                    ind += 4;\n                }\n                card.mainStation._sendCommand(proto.ACK, [], 0);\n                return card;\n            }),\n    },\n    SICard8: {\n        vals: [2000000, 2003000, 2004000, 3000000],\n        description: 'SI Card 8',\n        read: (card) => {\n            let len = undefined;\n            return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x00], 1)\n                .then((data0) => {\n                    console.assert(data0[0][2] === 0, 'Inconsistent');\n                    const page0 = data0[0].slice(3);\n                    var cn = arr2big([page0[25], page0[26], page0[27]]);\n                    if (card.cardNumber !== cn) {\n                        console.warn('SICard8 Error: SI Card Number inconsistency');\n                    }\n\n                    card.startTime = arr2time(page0.slice(14, 16));\n                    card.finishTime = arr2time(page0.slice(18, 20));\n                    card.checkTime = arr2time(page0.slice(10, 12));\n                    len = Math.min(Math.max(page0[22], 0), 128);\n                    card.punches = new Array(len);\n\n                    return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x01], 1);\n                })\n                .then((data1) => {\n                    console.assert(data1[0][2] === 1, 'Inconsistent');\n                    const page1 = data1[0].slice(3);\n                    for (let i = 0; i < 30; i++) {\n                        if (i >= len) {\n                            break;\n                        }\n                        var time = arr2time(page1.slice(i * 4 + 10, i * 4 + 12));\n                        if (0 <= time) {\n                            card.punches[i] = {\n                                code: page1[i * 4 + 9],\n                                time: time,\n                            };\n                        } else {\n                            console.warn('SICard8 Error: Undefined Time in punched range');\n                        }\n                    }\n                    return card.mainStation._sendCommand(proto.ACK, [], 0).then(() => card);\n                });\n        },\n    },\n    SICard9: {\n        vals: [1000000, 2000000],\n        description: 'SI Card 9',\n        read: (card) => {\n            let len = undefined;\n            return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x00], 1)\n                .then((data0) => {\n                    console.assert(data0[0][2] === 0, 'Inconsistent');\n                    const page0 = data0[0].slice(3);\n                    var cn = arr2big([page0[25], page0[26], page0[27]]);\n                    if (card.cardNumber !== cn) {\n                        console.warn('SICard9 Error: SI Card Number inconsistency');\n                    }\n\n                    card.startTime = arr2time(page0.slice(14, 16));\n                    card.finishTime = arr2time(page0.slice(18, 20));\n                    card.checkTime = arr2time(page0.slice(10, 12));\n                    len = Math.min(Math.max(page0[22], 0), 128);\n                    card.punches = new Array(len);\n\n                    let isLastBlock = false;\n                    for (let i = 0; i < 18; i++) {\n                        if (i >= len) {\n                            isLastBlock = true;\n                            break;\n                        }\n                        const time = arr2time(page0.slice(i * 4 + 58, i * 4 + 60));\n                        if (0 <= time) {\n                            card.punches[i] = {\n                                code: page0[i * 4 + 57],\n                                time: time,\n                            };\n                        } else {\n                            console.warn('SICard9 Error: Undefined Time in punched range');\n                        }\n                    }\n                    if (isLastBlock) {\n                        return card.mainStation._sendCommand(proto.ACK, [], 0).then(() => card);\n                    }\n\n                    return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x01], 1).then((data1) => {\n                        console.assert(data1[0][2] === 1, 'Inconsistent');\n                        const page1 = data1[0].slice(3);\n                        for (let i = 18; i < 50; i++) {\n                            if (i >= len) {\n                                break;\n                            }\n                            const time = arr2time(page1.slice(i * 4 - 70, i * 4 - 68));\n                            if (0 <= time) {\n                                card.punches[i] = {\n                                    code: page1[i * 4 - 71],\n                                    time: time,\n                                };\n                            } else {\n                                console.warn('SICard9 Error: Undefined Time in punched range');\n                            }\n                        }\n                        return card.mainStation._sendCommand(proto.ACK, [], 0).then(() => card);\n                    });\n                });\n        },\n    },\n    SICard10: {\n        vals: [7000000, 8000000],\n        description: 'SI Card 10',\n        read: (card) => {\n            const readSiCard10TimeBlock = (blockData, punchData, blockIndex, punchCount) => {\n                let isLastBlock = false;\n                const punchesPerBlock = 32;\n                for (let i = 0; i < punchesPerBlock; i++) {\n                    if (blockIndex * punchesPerBlock + i >= punchCount) {\n                        isLastBlock = true;\n                        break;\n                    }\n                    var time = arr2time(blockData.slice(i * 4 + 2, i * 4 + 4));\n                    if (0 <= time) {\n                        punchData[blockIndex * punchesPerBlock + i] = {\n                            code: blockData[i * 4 + 1],\n                            time: time,\n                        };\n                    } else {\n                        console.warn('SICard10 Error: Undefined Time in punched range');\n                    }\n                }\n                return isLastBlock;\n            };\n            let len = undefined;\n            return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x00], 1)\n                .then((data0) => {\n                    console.assert(data0[0][2] === 0, 'Inconsistent');\n                    const page0 = data0[0].slice(3);\n                    var cn = arr2big([page0[25], page0[26], page0[27]]);\n                    if (card.cardNumber !== cn) {\n                        console.warn('SICard10 Error: SI Card Number inconsistency');\n                    }\n\n                    card.startTime = arr2time(page0.slice(14, 16));\n                    card.finishTime = arr2time(page0.slice(18, 20));\n                    card.checkTime = arr2time(page0.slice(10, 12));\n                    len = Math.min(Math.max(page0[22], 0), 128);\n                    card.punches = new Array(len);\n\n                    return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x04], 1);\n                })\n                .then((data4) => {\n                    console.assert(data4[0][2] === 4, 'Inconsistent');\n                    const page4 = data4[0].slice(3);\n                    const is4LastBlock = readSiCard10TimeBlock(page4, card.punches, 0, len);\n                    if (is4LastBlock) {\n                        return card.mainStation._sendCommand(proto.ACK, [], 0).then(() => card);\n                    }\n                    return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x05], 1).then((data5) => {\n                        console.assert(data5[0][2] === 5, 'Inconsistent');\n                        const page5 = data5[0].slice(3);\n                        const is5LastBlock = readSiCard10TimeBlock(page5, card.punches, 1, len);\n                        if (is5LastBlock) {\n                            return card.mainStation._sendCommand(proto.ACK, [], 0).then(() => card);\n                        }\n                        return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x06], 1).then((data6) => {\n                            console.assert(data6[0][2] === 6, 'Inconsistent');\n                            const page6 = data6[0].slice(3);\n                            const is6LastBlock = readSiCard10TimeBlock(page6, card.punches, 2, len);\n                            if (is6LastBlock) {\n                                return card.mainStation._sendCommand(proto.ACK, [], 0).then(() => card);\n                            }\n                            return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x07], 1).then((data7) => {\n                                console.assert(data7[0][2] === 7, 'Inconsistent');\n                                const page7 = data7[0].slice(3);\n                                readSiCard10TimeBlock(page7, card.punches, 3, len);\n                                return card.mainStation._sendCommand(proto.ACK, [], 0).then(() => card);\n                            });\n                        });\n                    });\n                });\n        },\n    },\n    SICard11: {\n        vals: [9000000, 10000000],\n        description: 'SI Card 11',\n        read: (card) => {\n            const readSiCard11TimeBlock = (blockData, punchData, blockIndex, punchCount) => {\n                let isLastBlock = false;\n                const punchesPerBlock = 32;\n                for (let i = 0; i < punchesPerBlock; i++) {\n                    if (blockIndex * punchesPerBlock + i >= punchCount) {\n                        isLastBlock = true;\n                        break;\n                    }\n                    var time = arr2time(blockData.slice(i * 4 + 2, i * 4 + 4));\n                    if (0 <= time) {\n                        punchData[blockIndex * punchesPerBlock + i] = {\n                            code: blockData[i * 4 + 1],\n                            time: time,\n                        };\n                    } else {\n                        console.warn('SICard11 Error: Undefined Time in punched range');\n                    }\n                }\n                return isLastBlock;\n            };\n            let len = undefined;\n            return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x00], 1)\n                .then((data0) => {\n                    console.assert(data0[0][2] === 0, 'Inconsistent');\n                    const page0 = data0[0].slice(3);\n                    var cn = arr2big([page0[25], page0[26], page0[27]]);\n                    if (card.cardNumber !== cn) {\n                        console.warn('SICard11 Error: SI Card Number inconsistency');\n                    }\n\n                    card.startTime = arr2time(page0.slice(14, 16));\n                    card.finishTime = arr2time(page0.slice(18, 20));\n                    card.checkTime = arr2time(page0.slice(10, 12));\n                    len = Math.min(Math.max(page0[22], 0), 128);\n                    card.punches = new Array(len);\n\n                    return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x04], 1);\n                })\n                .then((data4) => {\n                    console.assert(data4[0][2] === 4, 'Inconsistent');\n                    const page4 = data4[0].slice(3);\n                    const is4LastBlock = readSiCard11TimeBlock(page4, card.punches, 0, len);\n                    if (is4LastBlock) {\n                        return card.mainStation._sendCommand(proto.ACK, [], 0).then(() => card);\n                    }\n                    return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x05], 1).then((data5) => {\n                        console.assert(data5[0][2] === 5, 'Inconsistent');\n                        const page5 = data5[0].slice(3);\n                        const is5LastBlock = readSiCard11TimeBlock(page5, card.punches, 1, len);\n                        if (is5LastBlock) {\n                            return card.mainStation._sendCommand(proto.ACK, [], 0).then(() => card);\n                        }\n                        return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x06], 1).then((data6) => {\n                            console.assert(data6[0][2] === 6, 'Inconsistent');\n                            const page6 = data6[0].slice(3);\n                            const is6LastBlock = readSiCard11TimeBlock(page6, card.punches, 2, len);\n                            if (is6LastBlock) {\n                                return card.mainStation._sendCommand(proto.ACK, [], 0).then(() => card);\n                            }\n                            return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x07], 1).then((data7) => {\n                                console.assert(data7[0][2] === 7, 'Inconsistent');\n                                const page7 = data7[0].slice(3);\n                                readSiCard11TimeBlock(page7, card.punches, 3, len);\n                                return card.mainStation._sendCommand(proto.ACK, [], 0).then(() => card);\n                            });\n                        });\n                    });\n                });\n        },\n    },\n    SIAC: {\n        vals: [8000000, 9000000],\n        description: 'SIAC',\n        read: (card) => {\n            const readSIACTimeBlock = (blockData, punchData, blockIndex, punchCount) => {\n                let isLastBlock = false;\n                const punchesPerBlock = 32;\n                for (let i = 0; i < punchesPerBlock; i++) {\n                    if (blockIndex * punchesPerBlock + i >= punchCount) {\n                        isLastBlock = true;\n                        break;\n                    }\n                    var time = arr2time(blockData.slice(i * 4 + 2, i * 4 + 4));\n                    if (0 <= time) {\n                        punchData[blockIndex * punchesPerBlock + i] = {\n                            code: blockData[i * 4 + 1],\n                            time: time,\n                        };\n                    } else {\n                        console.warn('SIAC Error: Undefined Time in punched range');\n                    }\n                }\n                return isLastBlock;\n            };\n            let len = undefined;\n            return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x00], 1)\n                .then((data0) => {\n                    console.assert(data0[0][2] === 0, 'Inconsistent');\n                    const page0 = data0[0].slice(3);\n                    var cn = arr2big([page0[25], page0[26], page0[27]]);\n                    if (card.cardNumber !== cn) {\n                        console.warn('SIAC Error: SI Card Number inconsistency');\n                    }\n\n                    card.startTime = arr2time(page0.slice(14, 16));\n                    card.finishTime = arr2time(page0.slice(18, 20));\n                    card.checkTime = arr2time(page0.slice(10, 12));\n                    len = Math.min(Math.max(page0[22], 0), 128);\n                    card.punches = new Array(len);\n\n                    return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x04], 1);\n                })\n                .then((data4) => {\n                    console.assert(data4[0][2] === 4, 'Inconsistent');\n                    const page4 = data4[0].slice(3);\n                    const is4LastBlock = readSIACTimeBlock(page4, card.punches, 0, len);\n                    if (is4LastBlock) {\n                        return card.mainStation._sendCommand(proto.ACK, [], 0).then(() => card);\n                    }\n                    return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x05], 1).then((data5) => {\n                        console.assert(data5[0][2] === 5, 'Inconsistent');\n                        const page5 = data5[0].slice(3);\n                        const is5LastBlock = readSIACTimeBlock(page5, card.punches, 1, len);\n                        if (is5LastBlock) {\n                            return card.mainStation._sendCommand(proto.ACK, [], 0).then(() => card);\n                        }\n                        return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x06], 1).then((data6) => {\n                            console.assert(data6[0][2] === 6, 'Inconsistent');\n                            const page6 = data6[0].slice(3);\n                            const is6LastBlock = readSIACTimeBlock(page6, card.punches, 2, len);\n                            if (is6LastBlock) {\n                                return card.mainStation._sendCommand(proto.ACK, [], 0).then(() => card);\n                            }\n                            return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x07], 1).then((data7) => {\n                                console.assert(data7[0][2] === 7, 'Inconsistent');\n                                const page7 = data7[0].slice(3);\n                                readSIACTimeBlock(page7, card.punches, 3, len);\n                                return card.mainStation._sendCommand(proto.ACK, [], 0).then(() => card);\n                            });\n                        });\n                    });\n                });\n        },\n    },\n    PCard: {vals: [4000000, 5000000], description: 'pCard', read: (_card) => undefined},\n    TCard: {vals: [6000000, 7000000], description: 'tCard', read: (_card) => undefined},\n    FCard: {vals: [14000000, 15000000], description: 'fCard', read: (_card) => undefined},\n};\n\nSiCard.typeByCardNumber = (cn) => {\n    if (!SiCard._typeLookup) {\n        SiCard._typeLookup = {borderList: [], borderLookup: {}};\n        Object.keys(SiCard.Type).map((k) => {\n            var vals = SiCard.Type[k].vals;\n            if ((vals.length % 2) !== 0) {\n                throw new Error(`SiCard.Type.${k}: vals length is ${vals.length}?!? (must be even)`);\n            }\n            var lastEvenVal = 0;\n            for (var i = 0; i < vals.length; i++) {\n                var borderList = SiCard._typeLookup.borderList;\n                let j;\n                for (j = 0; j < borderList.length && borderList[j] < vals[i]; j++) {\n                    // TODO: binary search here\n                }\n                var borderExisted = (SiCard._typeLookup.borderList[j] === vals[i]);\n                if (!borderExisted) { SiCard._typeLookup.borderList.splice(j, 0, vals[i]); }\n                if ((i % 2) === 0) {\n                    let collidingRange;\n                    if (borderExisted) {\n                        collidingRange = SiCard._typeLookup.borderLookup[vals[i]];\n                        if (collidingRange) {\n                            throw new Error(`SiCard.Type.${k}: ${vals[i]} would collide with ${collidingRange}`);\n                        }\n                    }\n                    if (!borderExisted && 0 < j) {\n                        collidingRange = SiCard._typeLookup.borderLookup[SiCard._typeLookup.borderList[j - 1]];\n                        if (collidingRange) {\n                            throw new Error(`SiCard.Type.${k}: ${vals[i]} would collide with ${collidingRange}`);\n                        }\n                    }\n                    SiCard._typeLookup.borderLookup[vals[i]] = k;\n                    lastEvenVal = vals[i];\n                } else {\n                    if (lastEvenVal !== SiCard._typeLookup.borderList[j - 1]) {\n                        throw new Error(`SiCard.Type.${k}: ${vals[i]} is not an immediate follow-up of ${lastEvenVal}`);\n                    }\n                    if (!SiCard._typeLookup.borderLookup[vals[i]]) { SiCard._typeLookup.borderLookup[vals[i]] = false; }\n                }\n            }\n        });\n    }\n    let j;\n    for (j = 0; j < SiCard._typeLookup.borderList.length && SiCard._typeLookup.borderList[j] <= cn; j++) {\n        // TODO: binary search here\n    }\n    if (j === 0) { return false; }\n    return SiCard._typeLookup.borderLookup[SiCard._typeLookup.borderList[j - 1]];\n};\n","export class BaseDriver {\n    get name() {\n        throw new Error('Driver must implement name getter');\n    }\n\n    new(_MainStation) {\n        throw new Error('Driver must implement \"new\" method');\n    }\n\n    detect(_MainStation) {\n        throw new Error('Driver must implement \"detect\" method');\n    }\n\n    open(_mainStation) {\n        throw new Error('Driver must implement \"open\" method');\n    }\n\n    close(_mainStation) {\n        throw new Error('Driver must implement \"close\" method');\n    }\n\n    send(_mainStation, _buffer) {\n        throw new Error('Driver must implement \"send\" method');\n    }\n}\n","import {BaseDriver} from './BaseDriver';\n\nconst siConfiguration = 1;\nconst siInterface = 0;\nconst siAlternate = 0;\nconst siEndpoint = 1;\nconst siPacketSize = 64;\nconst siDeviceFilters = [\n    {vendorId: 0x10c4, productId: 0x800a},\n];\n\n\nexport class WebUsb extends BaseDriver {\n    get name() {\n        return 'WebUSB';\n    }\n\n    new(MainStation) {\n        if (!('usb' in navigator)) {\n            return;\n        }\n        navigator.usb.requestDevice({\n            filters: siDeviceFilters,\n        })\n            .then((selectedDevice) => {\n                if (!(`USB-${selectedDevice.serialNumber}` in MainStation.allByDevice)) {\n                    new MainStation({\n                        ident: `USB-${selectedDevice.serialNumber}`,\n                        name: selectedDevice.productName,\n                        driver: this,\n                        _device: selectedDevice,\n                    });\n                }\n            });\n    }\n\n    detect(MainStation) {\n        if (!('usb' in navigator)) {\n            return;\n        }\n        navigator.usb.getDevices().then((devices) => {\n            devices.map((device) => {\n                const matchesSiDeviceFilter = siDeviceFilters.findIndex((filter) =>\n                    device.vendorId === filter.vendorId && device.productId === filter.productId) !== -1;\n                if (matchesSiDeviceFilter) {\n                    if (!(`USB-${device.serialNumber}` in MainStation.allByDevice)) {\n                        new MainStation({\n                            ident: `USB-${device.serialNumber}`,\n                            name: device.productName,\n                            driver: this,\n                            _device: device,\n                        });\n                    }\n                }\n            });\n        });\n    }\n\n    open(mainStation) {\n        return new Promise((resolve, _reject) => {\n            const dev = mainStation.device._device;\n\n            mainStation.device._receiveLoop = () => {\n                dev.transferIn(siEndpoint, siPacketSize)\n                    .then((response) => {\n                        mainStation.device._receiveLoop();\n                        var bufView = new Uint8Array(response.data.buffer);\n                        mainStation._logReceive(bufView);\n                        for (var i = 0; i < bufView.length; i++) {\n                            mainStation._respBuffer.push(bufView[i]);\n                        }\n                        mainStation._processReceiveBuffer();\n                    })\n                    .catch((err) => {\n                        console.warn(err);\n                        mainStation._remove();\n                    });\n            };\n\n            console.debug('Opening...', mainStation.device);\n            dev.open()\n                .then(() => {\n                    console.debug('Resetting...', dev);\n                    return dev.reset();\n                })\n                .then(() => {\n                    console.debug('Selecting Configuration...', dev);\n                    return dev.selectConfiguration(siConfiguration);\n                })\n                .then(() => {\n                    console.debug('Claiming Interface...', dev);\n                    return dev.claimInterface(siInterface);\n                })\n                .then(() => {\n                    console.debug('Selection Alternate Interface...', dev);\n                    return dev.selectAlternateInterface(siInterface, siAlternate);\n                })\n                .then(() => {\n                    console.debug('Enabling Serial...');\n                    return dev.controlTransferOut({\n                        requestType: 'vendor',\n                        recipient: 'interface',\n                        request: 0x00,\n                        value: 0x01,\n                        index: siInterface,\n                    });\n                })\n                .then(() => {\n                    console.debug('Setting Baudrate...');\n                    return dev.controlTransferOut({\n                        requestType: 'vendor',\n                        recipient: 'interface',\n                        request: 0x1E,\n                        value: 0x00,\n                        index: siInterface,\n                    }, new Uint8Array([0x00, 0x96, 0x00, 0x00]).buffer);\n                })\n                .then(() => {\n                    console.debug('Starting Receive Loop...');\n                    mainStation.device._receiveLoop();\n                    resolve();\n                });\n        });\n    }\n\n    close(mainStation) {\n        return new Promise((resolve, _reject) => {\n            const dev = mainStation.device._device;\n            console.debug('Disabling Serial...');\n            dev.controlTransferOut({\n                requestType: 'vendor',\n                recipient: 'interface',\n                request: 0x00,\n                value: 0x00,\n                index: siInterface,\n            })\n                .then(() => {\n                    console.debug('Releasing Interface...');\n                    return dev.releaseInterface(siInterface);\n                })\n                .then(() => {\n                    console.debug('Closing Device...');\n                    return dev.close();\n                })\n                .then(() => {\n                    resolve();\n                });\n        });\n    }\n\n    send(mainStation, buffer) {\n        const dev = mainStation.device._device;\n        return dev.transferOut(siEndpoint, buffer);\n    }\n}\n\nexport default WebUsb;\n","export {default as WebUsb} from './WebUsb';\n","import {arr2big, arr2cardNumber, CRC16, prettyHex, processSiProto} from './utils';\nimport {proto} from './constants';\nimport {SiCard} from './SiCard';\nimport {SiStation} from './SiStation';\nimport * as drivers from './drivers';\n\nclass SendTask {\n    constructor(\n        command,\n        parameters,\n        numResponses,\n        resolve,\n        reject,\n        timeout,\n    ) {\n        this.command = command;\n        this.parameters = parameters;\n        this.numResponses = numResponses;\n        this.resolve = resolve;\n        this.reject = reject;\n        this.timeout = timeout;\n        this.state = SendTask.State.QUEUED;\n        this.timeoutTimer = setTimeout(() => {\n            if (this.state !== SendTask.State.SENT) {\n                return;\n            }\n            console.debug(`Timeout: cmd ${prettyHex([this.command])} (expected ${this.numResponses} responses)`, this.responses);\n            this.fail();\n        }, timeout * 1000);\n        this.responses = [];\n    }\n\n    addResponse(response) {\n        this.responses.push(response);\n        if (this.responses.length === this.numResponses) {\n            this.succeed();\n        }\n    }\n\n    succeed() {\n        this.state = SendTask.State.SUCCEEDED;\n        clearTimeout(this.timeoutTimer);\n        this.resolve(this);\n    }\n\n    fail() {\n        this.state = SendTask.State.FAILED;\n        clearTimeout(this.timeoutTimer);\n        this.reject(this);\n    }\n}\n\nSendTask.State = {\n    QUEUED: 0,\n    SENT: 1,\n    SUCCEEDED: 2,\n    FAILED: 3,\n};\n\nexport class SiMainStation extends SiStation {\n    constructor(device, state = SiMainStation.State.Closed) {\n        super(null);\n        this.mainStation = this;\n        this.device = device;\n        this.card = false;\n        this.onRemoved = false;\n        this.onStateChanged = false;\n        this.onCardInserted = false;\n        this.onCard = false;\n        this.onCardRemoved = false;\n        this._sendQueue = [];\n        this._respBuffer = [];\n        this._deviceOpenTimer = false;\n        this._deviceOpenNumErrors = 0;\n        this.state = state;\n        if (!SiMainStation.allByDevice[device.ident]) {\n            SiMainStation.allByDevice[device.ident] = this;\n            try {\n                SiMainStation.onAdded(this);\n            } catch (err) {\n                // ignore\n            }\n        }\n        if (this.state === SiMainStation.State.Closed) {\n            this._deviceOpen();\n        }\n    }\n\n    resetCardCallbacks() {\n        this.onCardInserted = false;\n        this.onCard = false;\n        this.onCardRemoved = false;\n    }\n\n    _dispatch(f, args) {\n        if (f) {\n            setTimeout(() => f(...args), 1);\n        }\n    }\n\n    _changeState(newState) {\n        this.state = newState;\n        if (this.onStateChanged) {\n            this.onStateChanged(this.state);\n        }\n    }\n\n    _deviceOpen() {\n        this._changeState(SiMainStation.State.Opening);\n        this.device.driver.open(this)\n            .then(() => {\n                this._changeState(SiMainStation.State.Starting);\n                this._deviceOpenNumErrors = 0;\n                this._sendCommand(proto.cmd.GET_MS, [0x00], 1, 5)\n                    .then(() => {\n                        this._changeState(SiMainStation.State.Ready);\n                    })\n                    .catch((err) => {\n                        this._changeState(SiMainStation.State.Closed);\n                        console.error('Could not communicate after having opened SiMainStation: ', err);\n                        this._retryDeviceOpen();\n                    });\n            })\n            .catch((err) => {\n                console.error('Could not open SiMainStation: ', err);\n                this._retryDeviceOpen();\n            });\n    }\n\n    _retryDeviceOpen() {\n        var scheduleReopen = () => {\n            if (!this._deviceOpenTimer) {\n                var timeout = 100;\n                for (var i = 0; i < this._deviceOpenNumErrors && i < 10; i++) { timeout = timeout * 2; }\n                this._deviceOpenTimer = setTimeout(() => {\n                    this._deviceOpenTimer = false;\n                    this._deviceOpen();\n                }, timeout);\n                this._deviceOpenNumErrors++;\n            }\n        };\n        this.device.driver.close(this)\n            .then(() => {\n                scheduleReopen();\n            })\n            .catch((err) => {\n                console.error('Could not close device: ', err);\n                scheduleReopen();\n            });\n    }\n\n    _logReceive(bufView) {\n        console.debug(`<= ${prettyHex(bufView)}     (${this.device.driver.name}; ${this._respBuffer.length})`);\n    }\n\n    _processReceiveBuffer() {\n        const continueProcessing = (timeout = 1) => setTimeout(() => this._processReceiveBuffer(), timeout);\n        const message = processSiProto(this._respBuffer);\n        if (message === null) {\n            return null;\n        }\n        const {mode, command, parameters} = message;\n        if (mode === proto.NAK) {\n            if (0 < this._sendQueue.length && this._sendQueue[0].state === SendTask.State.SENT) {\n                this._sendQueue[0].fail();\n            }\n            return continueProcessing();\n        }\n        let cn, typeFromCN;\n        if (command === proto.cmd.SI5_DET) {\n            cn = arr2cardNumber([parameters[5], parameters[4], parameters[3]]);\n            this.card = new SiCard(this, cn);\n            console.log('SI5 DET', this.card, parameters);\n            this._dispatch(this.onCardInserted, [this.card]);\n            this.card.read()\n                .then((card) => {\n                    this._dispatch(this.onCard, [card]);\n                });\n            return continueProcessing();\n        }\n        if (command === proto.cmd.SI6_DET) {\n            cn = arr2cardNumber([parameters[5], parameters[4], parameters[3]]);\n            typeFromCN = SiCard.typeByCardNumber(cn);\n            if (typeFromCN !== 'SICard6') {\n                console.warn(`SICard6 Error: SI Card Number inconsistency: Function SI6 called, but number is ${cn} (=> ${typeFromCN})`);\n            }\n            this.card = new SiCard(this, cn);\n            console.log('SI6 DET', parameters);\n            this._dispatch(this.onCardInserted, [this.card]);\n            this.card.read()\n                .then((card) => {\n                    this._dispatch(this.onCard, [card]);\n                });\n            return continueProcessing();\n        }\n        if (command === proto.cmd.SI8_DET) {\n            cn = arr2cardNumber([parameters[5], parameters[4], parameters[3]]);\n            typeFromCN = SiCard.typeByCardNumber(cn);\n            if (!{'SICard8': 1, 'SICard9': 1, 'SICard10': 1, 'SICard11': 1}[typeFromCN]) {\n                console.warn(`SICard8 Error: SI Card Number inconsistency: Function SI8 called, but number is ${cn} (=> ${typeFromCN})`);\n            }\n            this.card = new SiCard(this, cn);\n            console.log('SI8 DET', parameters);\n            this._dispatch(this.onCardInserted, [this.card]);\n            this.card.read()\n                .then((card) => {\n                    this._dispatch(this.onCard, [card]);\n                });\n            return continueProcessing();\n        }\n        if (command === proto.cmd.SI_REM) {\n            cn = arr2cardNumber([parameters[5], parameters[4], parameters[3]]);\n            console.log('SI REM', parameters, cn, this.card);\n            if (this.card !== false && this.card.cardNumber === cn) {\n                this._dispatch(this.onCardRemoved, [this.card]);\n            } else {\n                console.warn(`Card ${cn} was removed, but never inserted`);\n            }\n            this.card = false;\n            if (\n                this._sendQueue.length > 0 &&\n                this._sendQueue[0].state === SendTask.State.SENT &&\n                0xB0 <= this._sendQueue[0].command &&\n                this._sendQueue[0].command <= 0xEF\n            ) { // Was expecting response from card => \"early Timeout\"\n                console.debug(`Early Timeout: cmd ${prettyHex([this._sendQueue[0].command])} (expected ${this._sendQueue[0].numResponses} responses)`, this._sendQueue[0].responses);\n                this._sendQueue[0].fail();\n            }\n            return continueProcessing();\n        }\n        if (command === proto.cmd.TRANS_REC) {\n            cn = arr2big([parameters[3], parameters[4], parameters[5]]);\n            if (cn < 500000) {\n                if (parameters[3] < 2) {\n                    cn = arr2big([parameters[4], parameters[5]]);\n                } else {\n                    cn = parameters[3] * 100000 + arr2big([parameters[4], parameters[5]]);\n                }\n            }\n            const transRecordCard = new SiCard(this, cn);\n            console.log('TRANS_REC', transRecordCard, parameters);\n            this._dispatch(this.onCardInserted, [transRecordCard]);\n            this._dispatch(this.onCardRemoved, [transRecordCard]);\n            return continueProcessing();\n        }\n        if (this._sendQueue.length === 0 || this._sendQueue[0].state !== SendTask.State.SENT) {\n            console.warn(`Strange Response: ${prettyHex([command])} (not expecting anything)...`);\n            return continueProcessing();\n        }\n        if (this._sendQueue[0].command !== command) {\n            console.warn(`Strange Response: expected ${prettyHex([this._sendQueue[0].command])}, but got ${prettyHex([command])}...`);\n            return continueProcessing();\n        }\n        this._sendQueue[0].addResponse(parameters);\n        return continueProcessing();\n    }\n\n    _processSendQueue() {\n        if (this.state !== SiMainStation.State.Starting && this.state !== SiMainStation.State.Ready) {\n            return setTimeout(() => this._processSendQueue(), 100);\n        }\n        if (this._sendQueue.length === 0 || this._sendQueue[0].state === SendTask.State.SENT) {\n            return null;\n        }\n        var sendTask = this._sendQueue[0];\n\n        // Build command\n        var commandString = [sendTask.command, sendTask.parameters.length].concat(sendTask.parameters);\n        var crc = CRC16(commandString);\n        var cmd = String.fromCharCode(proto.STX);\n        let i;\n        for (i = 0; i < commandString.length; i++) {\n            cmd += String.fromCharCode(commandString[i]);\n        }\n        for (i = 0; i < crc.length; i++) {\n            cmd += String.fromCharCode(crc[i]);\n        }\n        cmd += String.fromCharCode(proto.ETX);\n\n        // Send command\n        var bstr = String.fromCharCode(proto.WAKEUP) + cmd;\n        var bytes = new Uint8Array(bstr.length);\n        for (i = 0; i < bstr.length; i++) {\n            bytes[i] = bstr.charCodeAt(i);\n        }\n        this.device.driver.send(this, bytes.buffer)\n            .then(() => {\n                console.debug(`=> ${prettyHex(bstr)}     (${this.device.driver.name})`);\n                if (sendTask.numResponses <= 0) {\n                    sendTask.succeed();\n                }\n            })\n            .catch((err) => {\n                console.warn(err);\n                sendTask.fail();\n            });\n        sendTask.state = SendTask.State.SENT;\n        return null;\n    }\n\n    _sendCommand(command, parameters, numRespArg, timeoutArg) {\n        return new Promise((resolve, reject) => {\n            const numResponses = numRespArg ? numRespArg : 0;\n            const timeout = timeoutArg ? timeoutArg : 10;\n\n            const sendTask = new SendTask(\n                command,\n                parameters,\n                numResponses,\n                (resolvedTask) => {\n                    const shifted = this._sendQueue.shift();\n                    if (resolvedTask !== shifted) {\n                        throw new Error('Resolved unexecuting SendTask');\n                    }\n                    setTimeout(() => this._processSendQueue(), 1);\n                    resolve(resolvedTask.responses);\n                },\n                (rejectedTask) => {\n                    const shifted = this._sendQueue.shift();\n                    if (rejectedTask !== shifted) {\n                        throw new Error('Rejected unexecuting SendTask');\n                    }\n                    setTimeout(() => this._processSendQueue(), 1);\n                    reject(new Error('Rejection'));\n                },\n                timeout,\n            );\n            this._sendQueue.push(sendTask);\n            this._processSendQueue();\n        });\n    }\n\n    _remove() {\n        if (0 < this._sendQueue.length && this._sendQueue[0].state !== -1) {\n            clearTimeout(this._sendQueue[0].timeoutTimer);\n        }\n        clearTimeout(this._deviceOpenTimer);\n        delete SiMainStation.allByDevice[this.device.ident];\n        try {\n            SiMainStation.onRemoved(this);\n        } catch (err) {\n            // ignore\n        }\n        try {\n            this.onRemoved();\n        } catch (err) {\n            // ignore\n        }\n    }\n}\n\nSiMainStation.State = { // TODO: maybe include instructions in description?\n    Closed: 0,\n    Opening: 1,\n    Starting: 2,\n    Ready: 3,\n};\n\nSiMainStation.allByDevice = {};\nSiMainStation.all = () => {\n    var arr = [];\n    Object.keys(SiMainStation.allByDevice).map((deviceIdent) => {\n        arr.push(SiMainStation.allByDevice[deviceIdent]);\n    });\n    return arr;\n};\nSiMainStation.startDeviceDetection = () => {\n    var runDeviceDetection = () => {\n        Object.keys(drivers).map((k) => {\n            try {\n                var driver = new drivers[k]();\n                if (driver && driver.name && driver.detect && driver.send && driver.open && driver.close) {\n                    driver.detect(SiMainStation);\n                } else {\n                    console.warn('Not a driver:', k);\n                }\n            } catch (err) {\n                console.warn('Error in device detection:', err);\n            }\n        });\n        if (SiMainStation.detectionTimeout) { clearTimeout(SiMainStation.detectionTimeout); }\n        SiMainStation.detectionTimeout = setTimeout(runDeviceDetection, 1000);\n    };\n    runDeviceDetection();\n};\nSiMainStation.newDevice = () => {\n    Object.keys(drivers).map((k) => {\n        try {\n            var driver = new drivers[k]();\n            if (driver && driver.name && driver.detect && driver.send && driver.open && driver.close) {\n                driver.new(SiMainStation);\n            } else {\n                console.warn('Not a driver:', k);\n            }\n        } catch (err) {\n            console.warn('Error in device detection:', err);\n        }\n    });\n};\nSiMainStation.onAdded = (_ms) => undefined;\nSiMainStation.onRemoved = (_ms) => undefined;\n","/* global si */\n/* exported si */\n\nimport * as constants from './constants';\nimport * as utils from './utils';\nimport {SiCard} from './SiCard';\nimport {SiStation} from './SiStation';\nimport {SiMainStation} from './SiMainStation';\n\nexport const si = {\n    constants: constants,\n    utils: utils,\n    Station: SiStation,\n    MainStation: SiMainStation,\n    Card: SiCard,\n    onLoad: () => undefined,\n};\n\nwindow.addEventListener('load', () => {\n    SiMainStation.startDeviceDetection();\n    if (si.onLoad) {\n        si.onLoad();\n    }\n}, true);\n\nexport default si;\n\nwindow.si = si;\n"],"sourceRoot":""}