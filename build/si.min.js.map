{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/utils.js","webpack:///./src/constants.js","webpack:///./src/SiStation.js","webpack:///./src/SiCard.js","webpack:///./src/drivers/BaseDriver.js","webpack:///./src/drivers/WebUsb.js","webpack:///./src/drivers/index.js","webpack:///./src/SiMainStation.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","isByte","byte","Number","Math","floor","arr2big","arr","outnum","length","Error","pow","arr2time","console","warn","arr2date","secs","slice","Date","arr2cardNumber","cardnum","fourthSet","prettyHex","str","outstr","charCodeAt","toString","CRC16","concat","crc","val","j","timeoutResolvePromise","timeout","arguments","undefined","Promise","resolve","_reject","setTimeout","timeoutRejectPromise","reason","proto","STX","ETX","ACK","NAK","DLE","WAKEUP","basicCmd","SET_CARDNO","GET_SI5","SI5_WRITE","SI5_DET","TRANS_REC","TRANS_TIME","GET_SI6","SI6_DET","SET_MS","GET_MS","SET_SYS_VAL","GET_SYS_VAL","GET_BDATA","ERASE_BDATA","SET_TIME","GET_TIME","OFF","GET_BDATA2","SET_BAUD","basicCmdLookup","_basicCmdLookup","keys","map","k","cmd","GET_BACKUP","SRR_WRITE","SRR_READ","SRR_QUERY","SRR_PING","SRR_ADHOC","CLEAR_CARD","SET_SI6","SET_SI6_SPECIAL","SI_REM","SI8_DET","SET_SI8","GET_SI8","SIGNAL","cmdLookup","_cmdLookup","P_MS_DIRECT","P_MS_INDIRECT","P_SI6_CB","sysDataOffset","OLD_SERIAL","OLD_CPU_ID","SERIAL_NO","FIRMWARE","BUILD_DATE","MODEL_ID","MEM_SIZE","REFRESH_RATE","POWER_MODE","BAT_DATE","BAT_CAP","BACKUP_PTR","SI6_CB","BAT_STATE","MEM_OVERFLOW","INTERVAL","WTF","PROGRAM","MODE","STATION_CODE","PROTO","LAST_WRITE_DATE","LAST_WRITE_TIME","SLEEP_TIME","WORKING_TIME","M_CONTROL","M_START","M_FINISH","M_READ_SICARDS","M_CLEAR","M_CHECK","M_PRINTOUT","D_SUNDAY","D_MONDAY","D_TUESDAY","D_WEDNESDAY","D_THURSDAY","D_FRIDAY","D_SATURDAY","REC_LEN","T_OFFSET","T_CN","T_TIME","BC_CN","BC_TIME","_utils","_constants","SiStation","mainStation","_classCallCheck","this","_info","_infoTime","_infoSubscribers","force","_this","now","getTime","reject","push","_sendCommand","then","data","splice","_raw","serialNumber","firmwareVersion","buildDate","deviceModel","modelLookup","memorySize","refreshRate","powerMode","batteryDate","batteryCapacity","backupPointer","siCard6Mode","memoryOverflow","interval","wtf","program","mode","modeLookup","code","beeps","flashes","extendedProtocol","autoSend","handshake","sprint4ms","passwordOnly","stopOnFullBackup","autoReadout","lastWriteDate","autoOffTimeout","infoSubscriber","log","catch","_err","newTime","getHours","getMinutes","getSeconds","params","getFullYear","getMonth","getDate","getDay","getMilliseconds","countArg","count","paramsFunc","newValue","_this2","readInfo","info","newCode","newMode","newModeVal","newBeeps","newFlashes","newAutoSend","newExtendedProtocol","_modeLookup","Mode","_typeLookup","Type","_modelLookup","Model","vals","SIACSpecialFunction1","Control","Start","Finish","Readout","Clear","Check","Print","StartWithTimeTrigger","FinishWithTimeTrigger","BCControl","BCStart","BCFinish","BCSlave","Main","Sprint","Field","Master","BSF3","description","type","series","BSF4","BSF5","BSF6","BSF7","BSF8","BS7Master","BS8Master","BSM4","BSM6","BSM7","BSM8","BS7S","BS7P","BS7GSM","BS8P","SiCard","cardNumber","clearTime","checkTime","startTime","finishTime","punches","typeFromCN","typeByCardNumber","read","punch","time","join","replace","SICard5","card","cn","len","min","max","Array","ind","SICard6","blk","SICard8","data0","assert","page0","data1","page1","SICard9","isLastBlock","SICard10","readSiCard10TimeBlock","blockData","punchData","blockIndex","punchCount","data4","page4","data5","page5","data6","page6","data7","page7","SICard11","readSiCard11TimeBlock","SIAC","readSIACTimeBlock","PCard","_card","TCard","FCard","borderList","borderLookup","lastEvenVal","borderExisted","collidingRange","BaseDriver","_MainStation","_mainStation","_buffer","_BaseDriver2","siDeviceFilters","vendorId","productId","WebUsb","MainStation","navigator","usb","requestDevice","filters","selectedDevice","allByDevice","ident","productName","driver","_device","_this3","getDevices","devices","device","findIndex","filter","dev","_receiveLoop","transferIn","response","bufView","Uint8Array","buffer","_logReceive","_respBuffer","_processRespBuffer","err","_remove","debug","open","reset","selectConfiguration","claimInterface","selectAlternateInterface","controlTransferOut","requestType","recipient","request","index","releaseInterface","close","transferOut","default","_SiCard","_SiStation2","drivers","SiMainStation","state","State","Uninitialized","_possibleConstructorReturn","__proto__","getPrototypeOf","onRemoved","onStateChanged","onCardInserted","onCard","onCardRemoved","_sendQueue","_deviceOpenTimer","_deviceOpenNumErrors","onAdded","_deviceOpen","newState","_changeState","Ready","error","_retryDeviceOpen","scheduleReopen","window","_this4","timeoutTimer","clearTimeout","shift","command","parameters","crcContent","numResp","bufResp","_processSendQueue","_this5","commandString","String","fromCharCode","bstr","bytes","send","numRespArg","timeoutArg","_this6","sendTask","all","deviceIdent","startDeviceDetection","runDeviceDetection","detect","detectionTimeout","newDevice","new","_ms","constants","utils","_SiStation","_SiMainStation","si","Station","Card","onLoad","addEventListener"],"mappings":"aACA,IAAAA,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,IACAG,EAAAH,EACAI,GAAA,EACAH,YAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAZ,EAAAmB,EAAA,SAAAjB,GACAY,OAAAC,eAAAb,EAAA,cAAiDkB,OAAA,KAIjDpB,EAAAqB,EAAA,SAAAlB,GACA,IAAAS,EAAAT,KAAAmB,WACA,WAA2B,OAAAnB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAU,EAAAC,GAAsD,OAAAV,OAAAW,UAAAC,eAAAnB,KAAAgB,EAAAC,IAGtDxB,EAAA2B,EAAA,GAIA3B,IAAA4B,EAAA,mFCnEO,IAAMC,WAAS,SAACC,GAAD,OAClBC,OAAOD,KAAUA,GACjBE,KAAKC,MAAMH,KAAUA,GACrBA,EAAO,KAGEI,YAAU,SAACC,GAEpB,IADA,IAAIC,EAAS,EACJhC,EAAI,EAAGA,EAAI+B,EAAIE,OAAQjC,IAAK,CACjC,IAAM0B,EAAOK,EAAI/B,GACjB,IAAKyB,EAAOC,GACR,MAAM,IAAIQ,MAAM,mCAEpBF,GAAUN,EAAOE,KAAKO,IAAI,IAAOJ,EAAIE,OAASjC,EAAI,GAEtD,OAAOgC,GAGEI,WAAW,SAACL,GACrB,OAAkB,GAAdA,EAAIE,OACU,KAAVF,EAAI,IAAwB,KAAVA,EAAI,GACf,KAEJD,EAAQC,IAEnBM,QAAQC,KAAR,sCAAmDP,EAAIE,SAC/C,IAGCM,WAAW,SAACR,GACrB,GAAkB,GAAdA,EAAIE,QAA6B,GAAdF,EAAIE,OAAa,CACpC,IAAIO,EAAOV,EAAQC,EAAIU,MAAM,EAAG,IAChC,OAAO,IAAIC,KAAKX,EAAI,GAAK,IAAMA,EAAI,GAAK,EAAGA,EAAI,GAAsB,IAAR,EAATA,EAAI,IAAkBH,KAAKC,MAAMW,EAAO,MAAOZ,KAAKC,MAAOW,EAAO,KAAQ,IAAKA,EAAO,GAAmB,GAAdT,EAAIE,OAAuB,IAATF,EAAI,GAAY,IAAM,GACpL,OAAkB,GAAdA,EAAIE,OACJ,IAAIS,KAAK,IAAOX,EAAI,GAAIA,EAAI,GAAK,EAAGA,EAAI,KAEnDM,QAAQC,KAAR,8CAA2DP,EAAIE,QACxD,IAAIS,KAAK,KAAM,EAAG,KAGhBC,iBAAiB,SAACZ,GAC3B,GAAkB,GAAdA,EAAIE,QAA6B,GAAdF,EAAIE,OAAa,CACpC,IAAIW,EAAWb,EAAI,IAAM,EACzBa,GAAWb,EAAI,GACf,IAAIc,EAA2B,GAAdd,EAAIE,QAAyB,GAAVF,EAAI,GAOxC,OANKc,GAAa,EAAId,EAAI,IAAMA,EAAI,GAAK,EACrCa,GAAqB,IAATb,EAAI,IACTc,GAAa,EAAId,EAAI,MAC5Ba,GAAYb,EAAI,IAAM,IAEtB,EAAIA,EAAIE,SAAUW,GAAYb,EAAI,IAAM,IACrCa,EAGX,OADAP,QAAQC,KAAR,iDAA8DP,EAAIE,SAC1D,GAGCa,YAAY,SAACC,GACtB,IAAIC,EAAS,GACb,GAAmB,iBAARD,EAAkB,CACzB,IAAI/C,SACJ,IAAKA,EAAI,EAAGA,EAAI+C,EAAId,OAAQjC,IACxBgD,IAAa,KAAMD,EAAIE,WAAWjD,GAAGkD,SAAS,KAAOT,OAAO,GAA5D,QAED,CACH,IAAIzC,SACJ,IAAKA,EAAI,EAAGA,EAAI+C,EAAId,OAAQjC,IACxBgD,IAAa,KAAMD,EAAI/C,GAAGkD,SAAS,KAAOT,OAAO,GAAjD,IAGR,OAAOO,GAGEG,QAAQ,SAACJ,GAGlB,GAAIA,EAAId,OAAS,EACb,OAAS,GAAKc,EAAId,OAASc,EAAI,GAAK,EAAQ,GAAKA,EAAId,OAASc,EAAI,GAAK,GAI3E,IAFA,IAAMvB,EAAIuB,EAAId,OAAS,GAAK,EAAIc,EAAIK,QAAQ,EAAM,IAASL,EAAIK,QAAQ,IACnEC,EAAa,IAAP7B,EAAE,GAAaA,EAAE,GAClBxB,EAAI,EAAGA,EAAIwB,EAAES,OAAQjC,GAAK,EAAG,CAGlC,IAFA,IAAIK,EAAImB,EAAEiB,MAAMzC,EAAGA,EAAI,GACnBsD,EAAa,IAAPjD,EAAE,GAAaA,EAAE,GAClBkD,EAAI,EAAGA,EAAI,GAAIA,IACI,IAVjB,MAUFF,IACDA,IAAc,EACU,IAZrB,MAYEC,KAAwBD,GAAO,GACpCA,GAdM,QAgBNA,IAAc,EACU,IAhBrB,MAgBEC,KAAwBD,GAAO,IAExCC,IAAc,EAElBD,GAAa,MAEjB,OAASA,GAAO,EAAW,IAANA,IAGZG,wBAAwB,SAACxC,GAAD,IAAQyC,EAARC,UAAAzB,OAAA,QAAA0B,IAAAD,UAAA,GAAAA,UAAA,GAAkB,EAAlB,OACjC,IAAIE,QAAQ,SAACC,EAASC,GAAV,OACRC,WAAW,kBAAMF,EAAQ7C,IAAQyC,MAE5BO,uBAAuB,SAACC,EAAQR,GAAT,OAChC,IAAIG,QAAQ,SAACC,EAASC,GAAV,OACRC,WAAW,kBAAMF,EAAQI,IAASR,qFC1GnC,IAAMS,WAETC,IAAK,EACLC,IAAK,EACLC,IAAK,EACLC,IAAK,GACLC,IAAK,GACLC,OAAQ,IAGRC,UACIC,WAAY,GACZC,QAAS,GACTC,UAAW,GACXC,QAAS,GACTC,UAAW,GACXC,WAAY,GACZC,QAAS,GACTC,QAAS,IACTC,OAAQ,IACRC,OAAQ,IACRC,YAAa,IACbC,YAAa,IACbC,UAAW,IACXC,YAAa,IACbC,SAAU,IACVC,SAAU,IACVC,IAAK,IACLC,WAAY,IACZC,SAAU,KAEdC,eAAgB,WACZ,OAAI3B,EAAM4B,gBACC5B,EAAM4B,iBAEjB5B,EAAM4B,mBACNpF,OAAOqF,KAAK7B,EAAMO,UAAUuB,IAAI,SAACC,GAC7B/B,EAAM4B,gBAAgB5B,EAAMO,SAASwB,IAAMA,IAExC/B,EAAM4B,kBAIjBI,KACIC,WAAY,IACZf,YAAa,IACbC,YAAa,IACbe,UAAW,IACXC,SAAU,IACVC,UAAW,IACXC,SAAU,IACVC,UAAW,IACX7B,QAAS,IACTG,UAAW,IACX2B,WAAY,IACZzB,QAAS,IACT0B,QAAS,IACTC,gBAAiB,IACjB9B,QAAS,IACTI,QAAS,IACT2B,OAAQ,IACRC,QAAS,IACTC,QAAS,IACTC,QAAS,IACT7B,OAAQ,IACRC,OAAQ,IACRI,YAAa,IACbC,SAAU,IACVC,SAAU,IACVC,IAAK,IACLsB,OAAQ,IACRpB,SAAU,KAEdqB,UAAW,WACP,OAAI/C,EAAMgD,WACChD,EAAMgD,YAEjBhD,EAAMgD,cACNxG,OAAOqF,KAAK7B,EAAMgC,KAAKF,IAAI,SAACC,GACxB/B,EAAMgD,WAAWhD,EAAMgC,IAAID,IAAMA,IAE9B/B,EAAMgD,aAIjBC,YAAa,GACbC,cAAe,GACfC,SAAU,EAIVC,eACIC,WAAY,EACZC,WAAY,EACZC,UAAW,EACXC,SAAU,EACVC,WAAY,EACZC,SAAU,GAgBVC,SAAU,GACVC,aAAc,GACdC,WAAY,GAEZC,SAAU,GACVC,QAAS,GACTC,WAAY,GACZC,OAAQ,GACRC,UAAW,GACXC,aAAc,GAEdC,SAAU,GACVC,IAAK,GAELC,QAAS,IACTC,KAAM,IACNC,aAAc,IACdC,MAAO,IASPC,gBAAiB,IACjBC,gBAAiB,IACjBC,WAAY,IAIZC,aAAc,KAIlBC,UAAW,EACXC,QAAS,EACTC,SAAU,EACVC,eAAgB,EAChBC,QAAS,EACTC,QAAS,GACTC,WAAY,GAGZC,SAAU,EACVC,SAAU,EACVC,UAAW,EACXC,YAAa,EACbC,WAAY,EACZC,SAAU,EACVC,WAAY,EAGZC,QAAS,EAGTC,SAAU,EACVC,KAAM,EACNC,OAAQ,EAGRC,MAAO,EACPC,QAAS,8VChLbC,EAAAxK,EAAA,GACAyK,EAAAzK,EAAA,OAEa0K,yBACT,SAAAA,EAAYC,gGAAaC,CAAAC,KAAAH,GACrBG,KAAKF,YAAcA,EACnBE,KAAKC,SACLD,KAAKE,UAAY,EACjBF,KAAKG,+DAgCAC,GAAO,IAAAC,EAAAL,KACRM,GAAM,IAAIrI,MAAOsI,UACrB,OAAKH,GAASE,EAAMN,KAAKE,UAAY,KAC1B,EAAAP,EAAA5G,uBAAsBiH,KAAKC,QAEjCG,GAAS,EAAIJ,KAAKG,iBAAiB3I,OAC7B,IAAI2B,QAAQ,SAACC,EAASoH,GACzBH,EAAKF,iBAAiBM,MAAMrH,QAASA,EAASoH,OAAQA,MAGvDR,KAAKF,YAAYY,aAAajH,QAAMgC,IAAIb,aAAc,EAAM,KAAO,GACrE+F,KAAK,SAAC9K,GACH,IAAM+K,EAAO/K,EAAE,GAqCf,OApCA+K,EAAKC,OAAO,EAAG,GACfR,EAAKH,WAAY,IAAIjI,MAAOsI,UAC5BF,EAAKJ,SACLI,EAAKJ,MAAMa,KAAOF,EAClBP,EAAKJ,MAAMc,cAAe,EAAApB,EAAAtI,SAAQuJ,EAAK5I,MAAM,EAAM,IACnDqI,EAAKJ,MAAMe,iBAAkB,EAAArB,EAAAtI,SAAQuJ,EAAK5I,MAAM,EAAM,IACtDqI,EAAKJ,MAAMgB,WAAY,EAAAtB,EAAA7H,UAAS8I,EAAK5I,MAAM,EAAM,KACjDqI,EAAKJ,MAAMiB,YAAcrB,EAAUsB,eAAc,EAAAxB,EAAAtI,SAAQuJ,EAAK5I,MAAM,GAAM,MAC1EqI,EAAKJ,MAAMmB,YAAa,EAAAzB,EAAAtI,SAAQuJ,EAAK5I,MAAM,GAAM,KACjDqI,EAAKJ,MAAMoB,YAAcT,EAAK,IAC9BP,EAAKJ,MAAMqB,UAAYV,EAAK,IAC5BP,EAAKJ,MAAMsB,aAAc,EAAA5B,EAAA7H,UAAS8I,EAAK5I,MAAM,GAAM,KACnDqI,EAAKJ,MAAMuB,iBAAkB,EAAA7B,EAAAtI,SAAQuJ,EAAK5I,MAAM,GAAM,KACtDqI,EAAKJ,MAAMwB,eAAgB,EAAA9B,EAAAtI,SAAQuJ,EAAK5I,MAAM,GAAM,IAAMW,OAAOiI,EAAK5I,MAAM,GAAM,MAClFqI,EAAKJ,MAAMyB,aAAc,EAAA/B,EAAAtI,SAAQuJ,EAAK5I,MAAM,GAAM,KAClDqI,EAAKJ,MAAM0B,gBAAiB,EAAAhC,EAAAtI,SAAQuJ,EAAK5I,MAAM,GAAM,KACrDqI,EAAKJ,MAAM2B,UAAW,EAAAjC,EAAAtI,SAAQuJ,EAAK5I,MAAM,GAAM,KAC/CqI,EAAKJ,MAAM4B,KAAM,EAAAlC,EAAAtI,SAAQuJ,EAAK5I,MAAM,GAAM,KAC1CqI,EAAKJ,MAAM6B,QAAUlB,EAAK,KAC1BP,EAAKJ,MAAM8B,KAAOlC,EAAUmC,aAAapB,EAAK,MAC9CP,EAAKJ,MAAMgC,KAAOrB,EAAK,OAAuB,IAAbA,EAAK,OAAiB,GACvDP,EAAKJ,MAAMiC,MAAUtB,EAAK,MAAS,EAAK,EACxCP,EAAKJ,MAAMkC,QAAwB,EAAbvB,EAAK,KAC3BP,EAAKJ,MAAMmC,iBAAiC,EAAbxB,EAAK,KACpCP,EAAKJ,MAAMoC,SAAazB,EAAK,MAAS,EAAK,EAC3CP,EAAKJ,MAAMqC,UAAc1B,EAAK,MAAS,EAAK,EAC5CP,EAAKJ,MAAMsC,UAAc3B,EAAK,MAAS,EAAK,EAC5CP,EAAKJ,MAAMuC,aAAiB5B,EAAK,MAAS,EAAK,EAC/CP,EAAKJ,MAAMwC,iBAAqB7B,EAAK,MAAS,EAAK,EACnDP,EAAKJ,MAAMyC,YAAgB9B,EAAK,MAAS,EAAK,EAC9CP,EAAKJ,MAAM0C,eAAgB,EAAAhD,EAAA7H,UAAS8I,EAAK5I,MAAM,IAAM,MAErDqI,EAAKJ,MAAM2C,gBAAiB,EAAAjD,EAAAtI,SAAQuJ,EAAK5I,MAAM,IAAM,MACrDqI,EAAKF,iBAAiB5E,IAAI,SAACsH,GAAD,OAAoBvJ,WAAW,kBAAMuJ,EAAezJ,QAAQiH,EAAKJ,QAAQ,KACnGI,EAAKF,oBACLvI,QAAQkL,IAAI,YAAazC,EAAKJ,OACvBI,EAAKJ,QAEf8C,MAAM,SAACC,GAGJ,MAFA3C,EAAKF,iBAAiB5E,IAAI,SAACsH,GAAD,OAAoBvJ,WAAW,kBAAMuJ,EAAerC,UAAU,KACxFH,EAAKF,oBACC,IAAI1I,MAAM,4CAIvBwL,GACD,QAAgB/J,IAAZ+J,EACA,OAAOjD,KAAKF,YAAYY,aAAajH,QAAMgC,IAAIT,YAAc,GACxD2F,KAAK,SAAC9K,GAAD,OAAO,EAAA8J,EAAA7H,UAASjC,EAAE,GAAGmC,MAAM,MAGzC,IAAID,EAAQkL,EAAQC,WAAa,GAAM,KAA8B,GAAvBD,EAAQE,aAAoBF,EAAQG,aAC9EC,GACAJ,EAAQK,cAAgB,IACxBL,EAAQM,WAAa,EACrBN,EAAQO,WACPP,EAAQQ,UAAY,GAAKtM,KAAKC,MAAM6L,EAAQC,WAAa,IAC1DnL,GAAQ,EACD,IAAPA,EACAZ,KAAKC,MAAkC,IAA5B6L,EAAQS,kBAA0B,MAEjD,OAAO1D,KAAKF,YAAYY,aAAajH,QAAMgC,IAAIV,SAAUsI,EAAQ,GAC5D1C,KAAK,SAAC9K,GAAD,OAAO,EAAA8J,EAAA7H,UAASjC,EAAE,GAAGmC,MAAM,qCAIlC2L,GACH,IAAMC,GAASD,GAAYA,EAAW,EAAI,EAAIA,EAC9C,OAAO3D,KAAKF,YAAYY,aAAajH,QAAMgC,IAAIc,QAASqH,GAAQ,GAC3DjD,KAAK,SAACC,GACH,GAAIA,EAAK,GAAG,KAAOgD,EACf,MAAM,IAAInM,MAAM,kDAM5B,OAAOuI,KAAKF,YAAYY,aAAajH,QAAMgC,IAAIR,OAAS,gCAGvDtE,EAAUkN,EAAYC,GAAU,IAAAC,EAAA/D,KACjC,QAAiB9G,IAAb4K,EACA,OAAO9D,KAAKgE,UAAS,GAChBrD,KAAK,SAACsD,GAAD,OAAUA,EAAKtN,KAE7B,IAAI0M,OAASnK,EACb,OAAO8G,KAAKgE,UAAS,GAChBrD,KAAK,SAACsD,GAEH,KADAZ,EAASQ,EAAWI,IAEhB,MAAM,IAAIxM,MAAM,iBAEpB,OAAOsM,EAAKjE,YAAYY,aAAajH,QAAMgC,IAAId,YAAa0I,EAAQ,KAEvE1C,KAAK,SAAC9K,GACH,IAAM+K,EAAO/K,EAAE,GAEf,GADA+K,EAAKC,OAAO,EAAG,GACXD,EAAK,IAAMyC,EAAO,GAClB,MAAM,IAAI5L,MAAM,qBAEpB,OAAOsM,EAAKC,UAAS,KAExBrD,KAAK,SAACsD,GAAD,OAAUA,EAAKtN,kCAKxBuN,GACD,OAAOlE,KAAKiE,KAAK,OAAQ,SAACA,GAAD,OAAW,IAAgB,IAAVC,IAA4B,IAAVA,IAAqB,IAAwB,GAAlBD,EAAKnD,KAAK,QAAgBoD,gCAGhHC,GACD,OAAOnE,KAAKiE,KAAK,OAAQ,SAAChE,GACtB,IAAM+B,EAAanC,EAAUmC,aACvBoC,EAAaD,EAAQtN,eAAe,OAASsN,EAAQtL,IAAMsL,EACjE,YAA8BjL,GAA1B8I,EAAWoC,KAGP,IAAMA,IACfD,iCAGDE,GACF,OAAOrE,KAAKiE,KAAK,QAAS,SAACA,GAAD,OAAW,KAAOI,EAAW,EAAO,IAA2B,IAAlBJ,EAAKnD,KAAK,QAAgBuD,mCAG7FC,GACJ,OAAOtE,KAAKiE,KAAK,UAAW,SAACA,GAAD,OAAW,KAAOK,EAAa,EAAO,IAA2B,IAAlBL,EAAKnD,KAAK,QAAgBwD,oCAGhGC,GACL,OAAOvE,KAAKiE,KAAK,WAAY,SAACA,GAAD,OAAW,KAAOM,EAAc,EAAO,IAA2B,IAAlBN,EAAKnD,KAAK,QAAgByD,4CAG1FC,GACb,OAAOxE,KAAKiE,KAAK,mBAAoB,SAACA,GAAD,OAAW,KAAOO,EAAsB,EAAO,IAA2B,IAAlBP,EAAKnD,KAAK,QAAgB0D,0CAIvH,OAAOxE,KAAKiE,KAAK,eAAgB,kBAAM,QAAO/K,6CAI9C,OAAO8G,KAAKiE,KAAK,kBAAmB,kBAAM,QAAO/K,uCAIjD,OAAO8G,KAAKiE,KAAK,YAAa,kBAAM,QAAO/K,yCAI3C,OAAO8G,KAAKiE,KAAK,cAAe,kBAAM,QAAO/K,wCAI7C,OAAO8G,KAAKiE,KAAK,aAAc,kBAAM,QAAO/K,yCAI5C,OAAO8G,KAAKiE,KAAK,cAAe,kBAAM,QAAO/K,6CAI7C,OAAO8G,KAAKiE,KAAK,kBAAmB,kBAAM,QAAO/K,2CAIjD,OAAO8G,KAAKiE,KAAK,gBAAiB,kBAAM,QAAO/K,yCAI/C,OAAO8G,KAAKiE,KAAK,cAAe,kBAAM,QAAO/K,4CAI7C,OAAO8G,KAAKiE,KAAK,iBAAkB,kBAAM,QAAO/K,2CAIhD,OAAO8G,KAAKiE,KAAK,gBAAiB,kBAAM,QAAO/K,4CAI/C,OAAO8G,KAAKiE,KAAK,iBAAkB,kBAAM,QAAO/K,0CAhOhD,OAAI2G,EAAU4E,YAAsB5E,EAAU4E,aAC9C5E,EAAU4E,eACVxO,OAAOqF,KAAKuE,EAAU6E,MAAMnJ,IAAI,SAACC,GAC7BqE,EAAU4E,YAAY5E,EAAU6E,KAAKlJ,GAAG3C,KAAO2C,IAE5CqE,EAAU4E,kDAIjB,OAAI5E,EAAU8E,YAAsB9E,EAAU8E,aAC9C9E,EAAU8E,eACV1O,OAAOqF,KAAKuE,EAAU+E,MAAMrJ,IAAI,SAACC,GAC7BqE,EAAU8E,YAAY9E,EAAU+E,KAAKpJ,GAAG3C,KAAO2C,IAE5CqE,EAAU8E,mDAIjB,OAAI9E,EAAUgF,aAAuBhF,EAAUgF,cAC/ChF,EAAUgF,gBACV5O,OAAOqF,KAAKuE,EAAUiF,OAAOvJ,IAAI,SAACC,GAC9BqE,EAAUiF,MAAMtJ,GAAGuJ,KAAKxJ,IAAI,SAAC1C,GACzBgH,EAAUgF,aAAahM,GAAO2C,MAG/BqE,EAAUgF,uBA0MzBhF,EAAU6E,MACNM,sBAAuBnM,IAAK,GAC5BoM,SAAUpM,IAAK,GACfqM,OAAQrM,IAAK,GACbsM,QAAStM,IAAK,GACduM,SAAUvM,IAAK,GACfwM,OAAQxM,IAAK,GACbyM,OAAQzM,IAAK,IACb0M,OAAQ1M,IAAK,IACb2M,sBAAuB3M,IAAK,IAC5B4M,uBAAwB5M,IAAK,IAC7B6M,WAAY7M,IAAK,IACjB8M,SAAU9M,IAAK,IACf+M,UAAW/M,IAAK,IAChBgN,SAAUhN,IAAK,KAGnBgH,EAAU+E,MACNkB,MAAOjN,IAAK,GACZkN,QAASlN,IAAK,GACd0M,OAAQ1M,IAAK,GACbmN,OAAQnN,IAAK,GACboN,QAASpN,IAAK,IAGlBgH,EAAUiF,OACNoB,MAAOnB,MAAO,OAASoB,YAAa,OAAQC,KAAMvG,EAAU+E,KAAKoB,MAAOK,OAAQ,GAChFC,MAAOvB,MAAO,OAASoB,YAAa,OAAQC,KAAMvG,EAAU+E,KAAKoB,MAAOK,OAAQ,GAChFE,MAAOxB,MAAO,OAASoB,YAAa,OAAQC,KAAMvG,EAAU+E,KAAKoB,MAAOK,OAAQ,GAChFG,MAAOzB,MAAO,OAASoB,YAAa,OAAQC,KAAMvG,EAAU+E,KAAKoB,MAAOK,OAAQ,GAChFI,MAAO1B,MAAO,MAAQ,OAASoB,YAAa,OAAQC,KAAMvG,EAAU+E,KAAKoB,MAAOK,OAAQ,GACxFK,MAAO3B,MAAO,MAAQ,OAASoB,YAAa,OAAQC,KAAMvG,EAAU+E,KAAKoB,MAAOK,OAAQ,GACxFM,WAAY5B,MAAO,OAASoB,YAAa,aAAcC,KAAMvG,EAAU+E,KAAKqB,OAAQI,OAAQ,GAC5FO,WAAY7B,MAAO,OAASoB,YAAa,aAAcC,KAAMvG,EAAU+E,KAAKqB,OAAQI,OAAQ,GAC5FQ,MAAO9B,MAAO,OAASoB,YAAa,OAAQC,KAAMvG,EAAU+E,KAAKkB,KAAMO,OAAQ,GAC/ES,MAAO/B,MAAO,OAASoB,YAAa,OAAQC,KAAMvG,EAAU+E,KAAKkB,KAAMO,OAAQ,GAC/EU,MAAOhC,MAAO,OAASoB,YAAa,OAAQC,KAAMvG,EAAU+E,KAAKkB,KAAMO,OAAQ,GAC/EW,MAAOjC,MAAO,OAASoB,YAAa,OAAQC,KAAMvG,EAAU+E,KAAKkB,KAAMO,OAAQ,GAC/EY,MAAOlC,MAAO,OAASoB,YAAa,QAASC,KAAMvG,EAAU+E,KAAKmB,OAAQM,OAAQ,GAClFa,MAAOnC,MAAO,OAASoB,YAAa,QAASC,KAAMvG,EAAU+E,KAAKW,MAAOc,OAAQ,GACjFc,QAASpC,MAAO,OAASoB,YAAa,UAAWC,KAAMvG,EAAU+E,KAAKoB,MAAOK,OAAQ,GACrFe,MAAOrC,MAAO,OAASoB,YAAa,QAASC,KAAMvG,EAAU+E,KAAKW,MAAOc,OAAQ,4VCxRrF1G,EAAAxK,EAAA,GACAyK,EAAAzK,EAAA,OAEakS,sBACT,SAAAA,EAAYvH,EAAawH,gGAAYvH,CAAAC,KAAAqH,GACjCrH,KAAKF,YAAcA,EACnBE,KAAKsH,WAAaA,EAClBtH,KAAKuH,WAAa,EAClBvH,KAAKwH,WAAa,EAClBxH,KAAKyH,WAAa,EAClBzH,KAAK0H,YAAc,EACnB1H,KAAK2H,oDAIL,IAAIC,EAAaP,EAAOQ,iBAAiB7H,KAAKsH,YAC9C,OAAOD,EAAOzC,KAAKgD,GAAYE,KAAK9H,qCAIpC,OAAOqH,EAAOQ,iBAAiB7H,KAAKsH,6CAIpC,OACIA,WAAYtH,KAAKsH,WACjBC,UAAWvH,KAAKuH,UAChBC,UAAWxH,KAAKwH,UAChBC,UAAWzH,KAAKyH,UAChBC,WAAY1H,KAAK0H,WACjBC,QAAS3H,KAAK2H,4CAKlB,OAAU3H,KAAKoG,OAAf,YAAiCpG,KAAKsH,WAAtC,YACCtH,KAAKuH,UADN,YAECvH,KAAKwH,UAFN,YAGCxH,KAAKyH,UAHN,aAIEzH,KAAK0H,WAJP,KAKN1H,KAAK2H,QAAQpM,IAAI,SAACwM,GAAD,OAAcA,EAAM9F,KAApB,KAA6B8F,EAAMC,OAAQC,KAAK,MAL3D,sCAUA,OAAOjI,KAAKvH,WAAWyP,QAAQ,MAAO,mBAG9Cb,EAAOzC,MACHuD,SAAUpD,MAAO,IAAM,KAASoB,YAAa,YAAa2B,KAAM,SAACM,GAAD,OAC5DA,EAAKtI,YAAYY,aAAajH,QAAMgC,IAAIvB,WAAa,GAChDyG,KAAK,SAAC9K,GACH,IAAM+K,EAAO/K,EAAE,GACf+K,EAAKC,OAAO,EAAG,GACf,IAAIwH,GAAK,EAAA1I,EAAAtI,UAASuJ,EAAK,GAAIA,EAAK,GAAIA,EAAK,KACrC,OAASyH,GAAMzQ,QAAQC,KAAR,4EAAyFwQ,EAAzF,yBAEfA,EADAzH,EAAK,GAAK,GACL,EAAAjB,EAAAtI,UAASuJ,EAAK,GAAIA,EAAK,KAEb,IAAVA,EAAK,IAAc,EAAAjB,EAAAtI,UAASuJ,EAAK,GAAIA,EAAK,KAE/CwH,EAAKd,YAAce,GAAMzQ,QAAQC,KAAK,+CAE1CuQ,EAAKX,WAAY,EAAA9H,EAAAhI,UAASiJ,EAAK5I,MAAM,GAAI,KACzCoQ,EAAKV,YAAa,EAAA/H,EAAAhI,UAASiJ,EAAK5I,MAAM,GAAI,KAC1CoQ,EAAKZ,WAAY,EAAA7H,EAAAhI,UAASiJ,EAAK5I,MAAM,GAAI,KAEzC,IAAIsQ,EAAMnR,KAAKoR,IAAIpR,KAAKqR,IAAI5H,EAAK,IAAM,EAAG,GAAI,IAC9CwH,EAAKT,QAAU,IAAIc,MAAMH,GAEzB,IADA,IAAII,EAAM,GACDnT,EAAI,EAAGA,EAAI+S,EAAK/S,IAAK,CACrBmT,EAAM,IAAO,GACdA,IAEJ,IAAIV,GAAO,EAAArI,EAAAhI,UAASiJ,EAAK5I,MAAM0Q,EAAM,EAAGA,EAAM,IAC1C,GAAKV,EACLI,EAAKT,QAAQpS,IAAM0M,KAAMrB,EAAK8H,EAAM,GAAIV,KAAMA,GAE9CpQ,QAAQC,KAAK,kDAEjB6Q,GAAO,EAGX,OADAN,EAAKtI,YAAYY,aAAajH,QAAMG,OAAS,GACtCwO,MAGnBO,SAAU5D,MAAO,IAAQ,IAAS,OAAS,QAAUoB,YAAa,YAAa2B,KAAM,SAACM,GAAD,OACjFA,EAAKtI,YAAYY,aAAajH,QAAMgC,IAAIlB,SAAU,GAAO,GACpDoG,KAAK,SAACC,GACe,GAAdA,EAAK,GAAG,IAAWhJ,QAAQC,KAAR,sCAAmD+I,EAAK,GAAG,GAA3D,iBACL,GAAdA,EAAK,GAAG,IAAWhJ,QAAQC,KAAR,uCAAoD+I,EAAK,GAAG,GAA5D,iBACL,GAAdA,EAAK,GAAG,IAAWhJ,QAAQC,KAAR,sCAAmD+I,EAAK,GAAG,GAA3D,iBACvBA,EAAK,GAAGC,OAAO,EAAG,GAClBD,EAAK,GAAGC,OAAO,EAAG,GAClBD,EAAK,GAAGC,OAAO,EAAG,GAClB,IAAIwH,GAAK,EAAA1I,EAAAtI,UAASuJ,EAAK,GAAG,IAAKA,EAAK,GAAG,IAAKA,EAAK,GAAG,MAChDwH,EAAKd,YAAce,GAAMzQ,QAAQC,KAAK,+CAE1CuQ,EAAKX,WAAY,EAAA9H,EAAAhI,UAASiJ,EAAK,GAAG5I,MAAM,GAAI,KAC5CoQ,EAAKV,YAAa,EAAA/H,EAAAhI,UAASiJ,EAAK,GAAG5I,MAAM,GAAI,KAC7CoQ,EAAKZ,WAAY,EAAA7H,EAAAhI,UAASiJ,EAAK,GAAG5I,MAAM,GAAI,KAC5CoQ,EAAKb,WAAY,EAAA5H,EAAAhI,UAASiJ,EAAK,GAAG5I,MAAM,GAAI,KAC5C,IAAIsQ,EAAMnR,KAAKoR,IAAIpR,KAAKqR,IAAI5H,EAAK,GAAG,IAAM,EAAG,GAAI,IACjDwH,EAAKT,QAAU,IAAIc,MAAMH,GAGzB,IAFA,IAAIM,EAAM,EACNF,EAAM,EACDnT,EAAI,EAAGA,EAAI+S,EAAK/S,IAAK,CACtB,KAAOmT,IACPE,IACAF,EAAM,GAEV,IAAIV,GAAO,EAAArI,EAAAhI,UAASiJ,EAAKgI,GAAK5Q,MAAM0Q,EAAM,EAAGA,EAAM,IAC/C,GAAKV,EACLI,EAAKT,QAAQpS,IAAM0M,KAAMrB,EAAKgI,GAAKF,EAAM,GAAIV,KAAMA,GAEnDpQ,QAAQC,KAAK,kDAEjB6Q,GAAO,EAGX,OADAN,EAAKtI,YAAYY,aAAajH,QAAMG,OAAS,GACtCwO,MAGnBS,SAAU9D,MAAO,IAAS,OAAS,OAAS,KAAUoB,YAAa,YAAa2B,KAAM,SAACM,GACnF,IAAIE,OAAMpP,EACV,OAAOkP,EAAKtI,YAAYY,aAAajH,QAAMgC,IAAIa,SAAU,GAAO,GAC3DqE,KAAK,SAACmI,GACHlR,QAAQmR,OAAuB,IAAhBD,EAAM,GAAG,GAAU,gBAClC,IAAME,EAAQF,EAAM,GAAG9Q,MAAM,GACzBqQ,GAAK,EAAA1I,EAAAtI,UAAS2R,EAAM,IAAKA,EAAM,IAAKA,EAAM,MAW9C,OAVIZ,EAAKd,YAAce,GACnBzQ,QAAQC,KAAK,+CAGjBuQ,EAAKX,WAAY,EAAA9H,EAAAhI,UAASqR,EAAMhR,MAAM,GAAI,KAC1CoQ,EAAKV,YAAa,EAAA/H,EAAAhI,UAASqR,EAAMhR,MAAM,GAAI,KAC3CoQ,EAAKZ,WAAY,EAAA7H,EAAAhI,UAASqR,EAAMhR,MAAM,GAAI,KAC1CsQ,EAAMnR,KAAKoR,IAAIpR,KAAKqR,IAAIQ,EAAM,IAAK,GAAI,KACvCZ,EAAKT,QAAU,IAAIc,MAAMH,GAElBF,EAAKtI,YAAYY,aAAajH,QAAMgC,IAAIa,SAAU,GAAO,KAEnEqE,KAAK,SAACsI,GACHrR,QAAQmR,OAAuB,IAAhBE,EAAM,GAAG,GAAU,gBAElC,IADA,IAAMC,EAAQD,EAAM,GAAGjR,MAAM,GACpBzC,EAAI,EAAGA,EAAI,MACZA,GAAK+S,GADW/S,IAAK,CAIzB,IAAIyS,GAAO,EAAArI,EAAAhI,UAASuR,EAAMlR,MAAU,EAAJzC,EAAQ,GAAQ,EAAJA,EAAQ,KAChD,GAAKyS,EACLI,EAAKT,QAAQpS,IACT0M,KAAMiH,EAAU,EAAJ3T,EAAQ,GACpByS,KAAMA,GAGVpQ,QAAQC,KAAK,kDAGrB,OAAOuQ,EAAKtI,YAAYY,aAAajH,QAAMG,OAAS,GAAG+G,KAAK,kBAAMyH,QAG9Ee,SAAUpE,MAAO,IAAS,KAAUoB,YAAa,YAAa2B,KAAM,SAACM,GACjE,IAAIE,OAAMpP,EACV,OAAOkP,EAAKtI,YAAYY,aAAajH,QAAMgC,IAAIa,SAAU,GAAO,GAC3DqE,KAAK,SAACmI,GACHlR,QAAQmR,OAAuB,IAAhBD,EAAM,GAAG,GAAU,gBAClC,IAAME,EAAQF,EAAM,GAAG9Q,MAAM,GACzBqQ,GAAK,EAAA1I,EAAAtI,UAAS2R,EAAM,IAAKA,EAAM,IAAKA,EAAM,MAC1CZ,EAAKd,YAAce,GACnBzQ,QAAQC,KAAK,+CAGjBuQ,EAAKX,WAAY,EAAA9H,EAAAhI,UAASqR,EAAMhR,MAAM,GAAI,KAC1CoQ,EAAKV,YAAa,EAAA/H,EAAAhI,UAASqR,EAAMhR,MAAM,GAAI,KAC3CoQ,EAAKZ,WAAY,EAAA7H,EAAAhI,UAASqR,EAAMhR,MAAM,GAAI,KAC1CsQ,EAAMnR,KAAKoR,IAAIpR,KAAKqR,IAAIQ,EAAM,IAAK,GAAI,KACvCZ,EAAKT,QAAU,IAAIc,MAAMH,GAGzB,IADA,IAAIc,GAAc,EACT7T,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,GAAIA,GAAK+S,EAAK,CACVc,GAAc,EACd,MAEJ,IAAMpB,GAAO,EAAArI,EAAAhI,UAASqR,EAAMhR,MAAU,EAAJzC,EAAQ,GAAQ,EAAJA,EAAQ,KAClD,GAAKyS,EACLI,EAAKT,QAAQpS,IACT0M,KAAM+G,EAAU,EAAJzT,EAAQ,IACpByS,KAAMA,GAGVpQ,QAAQC,KAAK,kDAGrB,OAAIuR,EACOhB,EAAKtI,YAAYY,aAAajH,QAAMG,OAAS,GAAG+G,KAAK,kBAAMyH,IAG/DA,EAAKtI,YAAYY,aAAajH,QAAMgC,IAAIa,SAAU,GAAO,GAAGqE,KAAK,SAACsI,GACrErR,QAAQmR,OAAuB,IAAhBE,EAAM,GAAG,GAAU,gBAElC,IADA,IAAMC,EAAQD,EAAM,GAAGjR,MAAM,GACpBzC,EAAI,GAAIA,EAAI,MACbA,GAAK+S,GADY/S,IAAK,CAI1B,IAAMyS,GAAO,EAAArI,EAAAhI,UAASuR,EAAMlR,MAAU,EAAJzC,EAAQ,GAAQ,EAAJA,EAAQ,KAClD,GAAKyS,EACLI,EAAKT,QAAQpS,IACT0M,KAAMiH,EAAU,EAAJ3T,EAAQ,IACpByS,KAAMA,GAGVpQ,QAAQC,KAAK,kDAGrB,OAAOuQ,EAAKtI,YAAYY,aAAajH,QAAMG,OAAS,GAAG+G,KAAK,kBAAMyH,UAIlFiB,UAAWtE,MAAO,IAAS,KAAUoB,YAAa,aAAc2B,KAAM,SAACM,GACnE,IAAMkB,EAAwB,SAACC,EAAWC,EAAWC,EAAYC,GAG7D,IAFA,IAAIN,GAAc,EAET7T,EAAI,EAAGA,EADQ,GACaA,IAAK,CACtC,GAFoB,GAEhBkU,EAA+BlU,GAAKmU,EAAY,CAChDN,GAAc,EACd,MAEJ,IAAIpB,GAAO,EAAArI,EAAAhI,UAAS4R,EAAUvR,MAAU,EAAJzC,EAAQ,EAAO,EAAJA,EAAQ,IACnD,GAAKyS,EACLwB,EARgB,GAQNC,EAA+BlU,IACrC0M,KAAMsH,EAAc,EAAJhU,EAAQ,GACxByS,KAAMA,GAGVpQ,QAAQC,KAAK,mDAGrB,OAAOuR,GAEPd,OAAMpP,EACV,OAAOkP,EAAKtI,YAAYY,aAAajH,QAAMgC,IAAIa,SAAU,GAAO,GAC3DqE,KAAK,SAACmI,GACHlR,QAAQmR,OAAuB,IAAhBD,EAAM,GAAG,GAAU,gBAClC,IAAME,EAAQF,EAAM,GAAG9Q,MAAM,GACzBqQ,GAAK,EAAA1I,EAAAtI,UAAS2R,EAAM,IAAKA,EAAM,IAAKA,EAAM,MAW9C,OAVIZ,EAAKd,YAAce,GACnBzQ,QAAQC,KAAK,gDAGjBuQ,EAAKX,WAAY,EAAA9H,EAAAhI,UAASqR,EAAMhR,MAAM,GAAI,KAC1CoQ,EAAKV,YAAa,EAAA/H,EAAAhI,UAASqR,EAAMhR,MAAM,GAAI,KAC3CoQ,EAAKZ,WAAY,EAAA7H,EAAAhI,UAASqR,EAAMhR,MAAM,GAAI,KAC1CsQ,EAAMnR,KAAKoR,IAAIpR,KAAKqR,IAAIQ,EAAM,IAAK,GAAI,KACvCZ,EAAKT,QAAU,IAAIc,MAAMH,GAElBF,EAAKtI,YAAYY,aAAajH,QAAMgC,IAAIa,SAAU,GAAO,KAEnEqE,KAAK,SAACgJ,GACH/R,QAAQmR,OAAuB,IAAhBY,EAAM,GAAG,GAAU,gBAClC,IAAMC,EAAQD,EAAM,GAAG3R,MAAM,GAE7B,OADqBsR,EAAsBM,EAAOxB,EAAKT,QAAS,EAAGW,GAExDF,EAAKtI,YAAYY,aAAajH,QAAMG,OAAS,GAAG+G,KAAK,kBAAMyH,IAE/DA,EAAKtI,YAAYY,aAAajH,QAAMgC,IAAIa,SAAU,GAAO,GAAGqE,KAAK,SAACkJ,GACrEjS,QAAQmR,OAAuB,IAAhBc,EAAM,GAAG,GAAU,gBAClC,IAAMC,EAAQD,EAAM,GAAG7R,MAAM,GAE7B,OADqBsR,EAAsBQ,EAAO1B,EAAKT,QAAS,EAAGW,GAExDF,EAAKtI,YAAYY,aAAajH,QAAMG,OAAS,GAAG+G,KAAK,kBAAMyH,IAE/DA,EAAKtI,YAAYY,aAAajH,QAAMgC,IAAIa,SAAU,GAAO,GAAGqE,KAAK,SAACoJ,GACrEnS,QAAQmR,OAAuB,IAAhBgB,EAAM,GAAG,GAAU,gBAClC,IAAMC,EAAQD,EAAM,GAAG/R,MAAM,GAE7B,OADqBsR,EAAsBU,EAAO5B,EAAKT,QAAS,EAAGW,GAExDF,EAAKtI,YAAYY,aAAajH,QAAMG,OAAS,GAAG+G,KAAK,kBAAMyH,IAE/DA,EAAKtI,YAAYY,aAAajH,QAAMgC,IAAIa,SAAU,GAAO,GAAGqE,KAAK,SAACsJ,GACrErS,QAAQmR,OAAuB,IAAhBkB,EAAM,GAAG,GAAU,gBAClC,IAAMC,EAAQD,EAAM,GAAGjS,MAAM,GAE7B,OADAsR,EAAsBY,EAAO9B,EAAKT,QAAS,EAAGW,GACvCF,EAAKtI,YAAYY,aAAajH,QAAMG,OAAS,GAAG+G,KAAK,kBAAMyH,cAM1F+B,UAAWpF,MAAO,IAAS,KAAWoB,YAAa,aAAc2B,KAAM,SAACM,GACpE,IAAMgC,EAAwB,SAACb,EAAWC,EAAWC,EAAYC,GAG7D,IAFA,IAAIN,GAAc,EAET7T,EAAI,EAAGA,EADQ,GACaA,IAAK,CACtC,GAFoB,GAEhBkU,EAA+BlU,GAAKmU,EAAY,CAChDN,GAAc,EACd,MAEJ,IAAIpB,GAAO,EAAArI,EAAAhI,UAAS4R,EAAUvR,MAAU,EAAJzC,EAAQ,EAAO,EAAJA,EAAQ,IACnD,GAAKyS,EACLwB,EARgB,GAQNC,EAA+BlU,IACrC0M,KAAMsH,EAAc,EAAJhU,EAAQ,GACxByS,KAAMA,GAGVpQ,QAAQC,KAAK,mDAGrB,OAAOuR,GAEPd,OAAMpP,EACV,OAAOkP,EAAKtI,YAAYY,aAAajH,QAAMgC,IAAIa,SAAU,GAAO,GAC3DqE,KAAK,SAACmI,GACHlR,QAAQmR,OAAuB,IAAhBD,EAAM,GAAG,GAAU,gBAClC,IAAME,EAAQF,EAAM,GAAG9Q,MAAM,GACzBqQ,GAAK,EAAA1I,EAAAtI,UAAS2R,EAAM,IAAKA,EAAM,IAAKA,EAAM,MAW9C,OAVIZ,EAAKd,YAAce,GACnBzQ,QAAQC,KAAK,gDAGjBuQ,EAAKX,WAAY,EAAA9H,EAAAhI,UAASqR,EAAMhR,MAAM,GAAI,KAC1CoQ,EAAKV,YAAa,EAAA/H,EAAAhI,UAASqR,EAAMhR,MAAM,GAAI,KAC3CoQ,EAAKZ,WAAY,EAAA7H,EAAAhI,UAASqR,EAAMhR,MAAM,GAAI,KAC1CsQ,EAAMnR,KAAKoR,IAAIpR,KAAKqR,IAAIQ,EAAM,IAAK,GAAI,KACvCZ,EAAKT,QAAU,IAAIc,MAAMH,GAElBF,EAAKtI,YAAYY,aAAajH,QAAMgC,IAAIa,SAAU,GAAO,KAEnEqE,KAAK,SAACgJ,GACH/R,QAAQmR,OAAuB,IAAhBY,EAAM,GAAG,GAAU,gBAClC,IAAMC,EAAQD,EAAM,GAAG3R,MAAM,GAE7B,OADqBoS,EAAsBR,EAAOxB,EAAKT,QAAS,EAAGW,GAExDF,EAAKtI,YAAYY,aAAajH,QAAMG,OAAS,GAAG+G,KAAK,kBAAMyH,IAE/DA,EAAKtI,YAAYY,aAAajH,QAAMgC,IAAIa,SAAU,GAAO,GAAGqE,KAAK,SAACkJ,GACrEjS,QAAQmR,OAAuB,IAAhBc,EAAM,GAAG,GAAU,gBAClC,IAAMC,EAAQD,EAAM,GAAG7R,MAAM,GAE7B,OADqBoS,EAAsBN,EAAO1B,EAAKT,QAAS,EAAGW,GAExDF,EAAKtI,YAAYY,aAAajH,QAAMG,OAAS,GAAG+G,KAAK,kBAAMyH,IAE/DA,EAAKtI,YAAYY,aAAajH,QAAMgC,IAAIa,SAAU,GAAO,GAAGqE,KAAK,SAACoJ,GACrEnS,QAAQmR,OAAuB,IAAhBgB,EAAM,GAAG,GAAU,gBAClC,IAAMC,EAAQD,EAAM,GAAG/R,MAAM,GAE7B,OADqBoS,EAAsBJ,EAAO5B,EAAKT,QAAS,EAAGW,GAExDF,EAAKtI,YAAYY,aAAajH,QAAMG,OAAS,GAAG+G,KAAK,kBAAMyH,IAE/DA,EAAKtI,YAAYY,aAAajH,QAAMgC,IAAIa,SAAU,GAAO,GAAGqE,KAAK,SAACsJ,GACrErS,QAAQmR,OAAuB,IAAhBkB,EAAM,GAAG,GAAU,gBAClC,IAAMC,EAAQD,EAAM,GAAGjS,MAAM,GAE7B,OADAoS,EAAsBF,EAAO9B,EAAKT,QAAS,EAAGW,GACvCF,EAAKtI,YAAYY,aAAajH,QAAMG,OAAS,GAAG+G,KAAK,kBAAMyH,cAM1FiC,MAAOtF,MAAO,IAAS,KAAUoB,YAAa,OAAQ2B,KAAM,SAACM,GACzD,IAAMkC,EAAoB,SAACf,EAAWC,EAAWC,EAAYC,GAGzD,IAFA,IAAIN,GAAc,EAET7T,EAAI,EAAGA,EADQ,GACaA,IAAK,CACtC,GAFoB,GAEhBkU,EAA+BlU,GAAKmU,EAAY,CAChDN,GAAc,EACd,MAEJ,IAAIpB,GAAO,EAAArI,EAAAhI,UAAS4R,EAAUvR,MAAU,EAAJzC,EAAQ,EAAO,EAAJA,EAAQ,IACnD,GAAKyS,EACLwB,EARgB,GAQNC,EAA+BlU,IACrC0M,KAAMsH,EAAc,EAAJhU,EAAQ,GACxByS,KAAMA,GAGVpQ,QAAQC,KAAK,+CAGrB,OAAOuR,GAEPd,OAAMpP,EACV,OAAOkP,EAAKtI,YAAYY,aAAajH,QAAMgC,IAAIa,SAAU,GAAO,GAC3DqE,KAAK,SAACmI,GACHlR,QAAQmR,OAAuB,IAAhBD,EAAM,GAAG,GAAU,gBAClC,IAAME,EAAQF,EAAM,GAAG9Q,MAAM,GACzBqQ,GAAK,EAAA1I,EAAAtI,UAAS2R,EAAM,IAAKA,EAAM,IAAKA,EAAM,MAW9C,OAVIZ,EAAKd,YAAce,GACnBzQ,QAAQC,KAAK,4CAGjBuQ,EAAKX,WAAY,EAAA9H,EAAAhI,UAASqR,EAAMhR,MAAM,GAAI,KAC1CoQ,EAAKV,YAAa,EAAA/H,EAAAhI,UAASqR,EAAMhR,MAAM,GAAI,KAC3CoQ,EAAKZ,WAAY,EAAA7H,EAAAhI,UAASqR,EAAMhR,MAAM,GAAI,KAC1CsQ,EAAMnR,KAAKoR,IAAIpR,KAAKqR,IAAIQ,EAAM,IAAK,GAAI,KACvCZ,EAAKT,QAAU,IAAIc,MAAMH,GAElBF,EAAKtI,YAAYY,aAAajH,QAAMgC,IAAIa,SAAU,GAAO,KAEnEqE,KAAK,SAACgJ,GACH/R,QAAQmR,OAAuB,IAAhBY,EAAM,GAAG,GAAU,gBAClC,IAAMC,EAAQD,EAAM,GAAG3R,MAAM,GAE7B,OADqBsS,EAAkBV,EAAOxB,EAAKT,QAAS,EAAGW,GAEpDF,EAAKtI,YAAYY,aAAajH,QAAMG,OAAS,GAAG+G,KAAK,kBAAMyH,IAE/DA,EAAKtI,YAAYY,aAAajH,QAAMgC,IAAIa,SAAU,GAAO,GAAGqE,KAAK,SAACkJ,GACrEjS,QAAQmR,OAAuB,IAAhBc,EAAM,GAAG,GAAU,gBAClC,IAAMC,EAAQD,EAAM,GAAG7R,MAAM,GAE7B,OADqBsS,EAAkBR,EAAO1B,EAAKT,QAAS,EAAGW,GAEpDF,EAAKtI,YAAYY,aAAajH,QAAMG,OAAS,GAAG+G,KAAK,kBAAMyH,IAE/DA,EAAKtI,YAAYY,aAAajH,QAAMgC,IAAIa,SAAU,GAAO,GAAGqE,KAAK,SAACoJ,GACrEnS,QAAQmR,OAAuB,IAAhBgB,EAAM,GAAG,GAAU,gBAClC,IAAMC,EAAQD,EAAM,GAAG/R,MAAM,GAE7B,OADqBsS,EAAkBN,EAAO5B,EAAKT,QAAS,EAAGW,GAEpDF,EAAKtI,YAAYY,aAAajH,QAAMG,OAAS,GAAG+G,KAAK,kBAAMyH,IAE/DA,EAAKtI,YAAYY,aAAajH,QAAMgC,IAAIa,SAAU,GAAO,GAAGqE,KAAK,SAACsJ,GACrErS,QAAQmR,OAAuB,IAAhBkB,EAAM,GAAG,GAAU,gBAClC,IAAMC,EAAQD,EAAM,GAAGjS,MAAM,GAE7B,OADAsS,EAAkBJ,EAAO9B,EAAKT,QAAS,EAAGW,GACnCF,EAAKtI,YAAYY,aAAajH,QAAMG,OAAS,GAAG+G,KAAK,kBAAMyH,cAM1FmC,OAAQxF,MAAO,IAAS,KAAUoB,YAAa,QAAS2B,KAAM,SAAC0C,MAC/DC,OAAQ1F,MAAO,IAAS,KAAUoB,YAAa,QAAS2B,KAAM,SAAC0C,MAC/DE,OAAQ3F,MAAO,KAAU,MAAWoB,YAAa,QAAS2B,KAAM,SAAC0C,OAGrEnD,EAAOQ,iBAAmB,SAACQ,GAClBhB,EAAO1C,cACR0C,EAAO1C,aAAegG,cAAgBC,iBACtC3U,OAAOqF,KAAK+L,EAAOzC,MAAMrJ,IAAI,SAACC,GAC1B,IAAIuJ,EAAOsC,EAAOzC,KAAKpJ,GAAGuJ,KAC1B,GAAKA,EAAKvN,OAAS,GAAM,EACrB,MAAM,IAAIC,MAAJ,eAAyB+D,EAAzB,oBAA8CuJ,EAAKvN,OAAnD,sBAGV,IADA,IAAIqT,EAAc,EACTtV,EAAI,EAAGA,EAAIwP,EAAKvN,OAAQjC,IAAK,CAClC,IAAIoV,EAAatD,EAAO1C,YAAYgG,WAChC7R,SACJ,IAAKA,EAAI,EAAGA,EAAI6R,EAAWnT,QAAUmT,EAAW7R,GAAKiM,EAAKxP,GAAIuD,KAG9D,IAAIgS,EAAiBzD,EAAO1C,YAAYgG,WAAW7R,IAAMiM,EAAKxP,GAE9D,GADKuV,GAAiBzD,EAAO1C,YAAYgG,WAAW9J,OAAO/H,EAAG,EAAGiM,EAAKxP,IACjEA,EAAI,GAAM,EAAG,CACd,IAAIwV,SACJ,GAAID,IACAC,EAAiB1D,EAAO1C,YAAYiG,aAAa7F,EAAKxP,KAElD,MAAM,IAAIkC,MAAJ,eAAyB+D,EAAzB,KAA+BuJ,EAAKxP,GAApC,uBAA6DwV,GAG3E,IAAKD,GAAiB,EAAIhS,IACtBiS,EAAiB1D,EAAO1C,YAAYiG,aAAavD,EAAO1C,YAAYgG,WAAW7R,EAAI,KAE/E,MAAM,IAAIrB,MAAJ,eAAyB+D,EAAzB,KAA+BuJ,EAAKxP,GAApC,uBAA6DwV,GAG3E1D,EAAO1C,YAAYiG,aAAa7F,EAAKxP,IAAMiG,EAC3CqP,EAAc9F,EAAKxP,OAChB,CACH,GAAIsV,GAAexD,EAAO1C,YAAYgG,WAAW7R,EAAI,GACjD,MAAM,IAAIrB,MAAJ,eAAyB+D,EAAzB,KAA+BuJ,EAAKxP,GAApC,qCAA2EsV,GAEhFxD,EAAO1C,YAAYiG,aAAa7F,EAAKxP,MAAO8R,EAAO1C,YAAYiG,aAAa7F,EAAKxP,KAAM,QAK5G,IAAIuD,SACJ,IAAKA,EAAI,EAAGA,EAAIuO,EAAO1C,YAAYgG,WAAWnT,QAAU6P,EAAO1C,YAAYgG,WAAW7R,IAAMuP,EAAIvP,KAGhG,OAAS,GAALA,GACGuO,EAAO1C,YAAYiG,aAAavD,EAAO1C,YAAYgG,WAAW7R,EAAI,+UClehEkS,+KAKLC,GACA,MAAM,IAAIxT,MAAM,qEAGbwT,GACH,MAAM,IAAIxT,MAAM,sEAGfyT,GACD,MAAM,IAAIzT,MAAM,qEAGdyT,GACF,MAAM,IAAIzT,MAAM,qEAGfyT,EAAcC,GACf,MAAM,IAAI1T,MAAM,oEApBhB,MAAM,IAAIA,MAAM,sYCFxB2T,EAAAjW,EAAA,GAEA,IAKMkW,IACDC,SAAU,KAAQC,UAAW,QAIrBC,yrBAAeR,6CAKpBS,GAAa,IAAA1H,EAAA/D,KACP,QAAS0L,WAGfA,UAAUC,IAAIC,eACVC,QAASR,IAER1K,KAAK,SAACmL,GACG,OAAOA,EAAe/K,gBAAkB0K,EAAYM,aACtD,IAAIN,GACAO,aAAcF,EAAe/K,aAC7BjL,KAAMgW,EAAeG,YACrBC,OAAQnI,EACRoI,QAASL,qCAMtBL,GAAa,IAAAW,EAAApM,KACV,QAAS0L,WAGfA,UAAUC,IAAIU,aAAa1L,KAAK,SAAC2L,GAC7BA,EAAQ/Q,IAAI,SAACgR,IAE8E,IADzDlB,EAAgBmB,UAAU,SAACC,GAAD,OACpDF,EAAOjB,WAAamB,EAAOnB,UAAYiB,EAAOhB,YAAckB,EAAOlB,cAE7D,OAAOgB,EAAOxL,gBAAkB0K,EAAYM,aAC9C,IAAIN,GACAO,aAAcO,EAAOxL,aACrBjL,KAAMyW,EAAON,YACbC,OAAQE,EACRD,QAASI,sCAQ5BzM,GACD,OAAO,IAAI3G,QAAQ,SAACC,EAASC,GACzB,IAAMqT,EAAM5M,EAAYyM,OAAOJ,QAE/BrM,EAAYyM,OAAOI,aAAe,WAC9BD,EAAIE,WA1DD,EACE,IA0DAjM,KAAK,SAACkM,GACH/M,EAAYyM,OAAOI,eACnB,IAAIG,EAAU,IAAIC,WAAWF,EAASjM,KAAKoM,QAC3ClN,EAAYmN,YAAYH,GACxB,IAAK,IAAIvX,EAAI,EAAGA,EAAIuX,EAAQtV,OAAQjC,IAAOuK,EAAYoN,YAAYzM,KAAKqM,EAAQvX,IAChFuK,EAAYqN,uBAEfpK,MAAM,SAACqK,GACJxV,QAAQC,KAAKuV,GACbtN,EAAYuN,aAIxBzV,QAAQ0V,MAAM,aAAcxN,EAAYyM,QACxCG,EAAIa,OACC5M,KAAK,WAEF,OADA/I,QAAQ0V,MAAM,eAAgBZ,GACvBA,EAAIc,UAEd7M,KAAK,WAEF,OADA/I,QAAQ0V,MAAM,6BAA8BZ,GACrCA,EAAIe,oBAnFP,KAqFP9M,KAAK,WAEF,OADA/I,QAAQ0V,MAAM,wBAAyBZ,GAChCA,EAAIgB,eAtFX,KAwFH/M,KAAK,WAEF,OADA/I,QAAQ0V,MAAM,mCAAoCZ,GAC3CA,EAAIiB,yBA1FX,EACA,KA2FHhN,KAAK,WAEF,OADA/I,QAAQ0V,MAAM,sBACPZ,EAAIkB,oBACPC,YAAa,SACbC,UAAW,YACXC,QAAS,EACTxX,MAAO,EACPyX,MAnGJ,MAsGHrN,KAAK,WAEF,OADA/I,QAAQ0V,MAAM,uBACPZ,EAAIkB,oBACPC,YAAa,SACbC,UAAW,YACXC,QAAS,GACTxX,MAAO,EACPyX,MA7GJ,GA8GG,IAAIjB,YAAY,EAAM,IAAM,EAAM,IAAOC,UAE/CrM,KAAK,WACF/I,QAAQ0V,MAAM,4BACdxN,EAAYyM,OAAOI,eACnBvT,sCAKV0G,GACF,OAAO,IAAI3G,QAAQ,SAACC,EAASC,GACzB,IAAMqT,EAAM5M,EAAYyM,OAAOJ,QAC/BvU,QAAQ0V,MAAM,uBACdZ,EAAIkB,oBACAC,YAAa,SACbC,UAAW,YACXC,QAAS,EACTxX,MAAO,EACPyX,MAjII,IAmIHrN,KAAK,WAEF,OADA/I,QAAQ0V,MAAM,0BACPZ,EAAIuB,iBArIX,KAuIHtN,KAAK,WAEF,OADA/I,QAAQ0V,MAAM,qBACPZ,EAAIwB,UAEdvN,KAAK,WACFvH,qCAKX0G,EAAakN,GAEd,OADYlN,EAAYyM,OAAOJ,QACpBgC,YAjJA,EAiJwBnB,gCAxInC,MAAO,4BA4IAxB,qMC1JP4C,gXCARzO,EAAAxK,EAAA,GACAyK,EAAAzK,EAAA,GACAkZ,EAAAlZ,EAAA,GACAmZ,EAAAnZ,EAAA,GACYoZ,0JAAZpZ,EAAA,QAEaqZ,8BACT,SAAAA,EAAYjC,GAAmD,IAA3CkC,EAA2CxV,UAAAzB,OAAA,QAAA0B,IAAAD,UAAA,GAAAA,UAAA,GAAnCuV,EAAcE,MAAMC,2GAAe5O,CAAAC,KAAAwO,GAAA,IAAAnO,mKAAAuO,CAAA5O,MAAAwO,EAAAK,WAAA5Y,OAAA6Y,eAAAN,IAAA9Y,KAAAsK,KACrD,OAcN,GAbAK,EAAKP,YAALO,EACAA,EAAKkM,OAASA,EACdlM,EAAK+H,MAAO,EACZ/H,EAAK0O,WAAY,EACjB1O,EAAK2O,gBAAiB,EACtB3O,EAAK4O,gBAAiB,EACtB5O,EAAK6O,QAAS,EACd7O,EAAK8O,eAAgB,EACrB9O,EAAK+O,cACL/O,EAAK6M,eACL7M,EAAKgP,kBAAmB,EACxBhP,EAAKiP,qBAAuB,EAC5BjP,EAAKoO,MAAQA,GACRD,EAAczC,YAAYQ,EAAOP,OAAQ,CAC1CwC,EAAczC,YAAYQ,EAAOP,OAAjC3L,EACA,IACImO,EAAce,QAAdlP,GACF,MAAO+M,KAnB8C,OAuBvD/M,EAAKoO,OAASD,EAAcE,MAAMC,eAClCtO,EAAKmP,cAxBkDnP,qUADhCR,6DA8B3BG,KAAKiP,gBAAiB,EACtBjP,KAAKkP,QAAS,EACdlP,KAAKmP,eAAgB,uCAGZM,GACTzP,KAAKyO,MAAQgB,EACTzP,KAAKgP,gBACLhP,KAAKgP,eAAehP,KAAKyO,6CAInB,IAAA1K,EAAA/D,KACVA,KAAKuM,OAAOL,OAAOqB,KAAKvN,MACnBW,KAAK,WACFoD,EAAKuL,qBAAuB,EAC5BvL,EAAKrD,aAAajH,QAAMgC,IAAIf,QAAS,GAAO,EAAG,GAC1CiG,KAAK,WACFoD,EAAK2L,aAAalB,EAAcE,MAAMiB,SAEzC5M,MAAM,SAACqK,GACJrJ,EAAK2L,aAAalB,EAAcE,MAAMC,eACtC/W,QAAQgY,MAAM,4DAA6DxC,GAC3ErJ,EAAK8L,uBAGhB9M,MAAM,SAACqK,GACJxV,QAAQgY,MAAM,iCAAkCxC,GAChDrJ,EAAK8L,gEAIE,IAAAzD,EAAApM,KACX8P,EAAiB,WACjB,IAAK1D,EAAKiD,iBAAkB,CAExB,IADA,IAAIrW,EAAU,IACLzD,EAAI,EAAGA,EAAI6W,EAAKkD,sBAAwB/Z,EAAI,GAAIA,IAAOyD,GAAoB,EACpFoT,EAAKiD,iBAAmBU,OAAOzW,WAAW,WACtC8S,EAAKiD,kBAAmB,EACxBjD,EAAKoD,eACNxW,GACHoT,EAAKkD,yBAGbtP,KAAKuM,OAAOL,OAAOgC,MAAMlO,MACpBW,KAAK,WACFmP,MAEH/M,MAAM,SAACqK,GACJxV,QAAQgY,MAAM,2BAA4BxC,GAC1C0C,0CAIAhD,GACRlV,QAAQ0V,MAAR,OAAoB,EAAA3N,EAAAtH,WAAUyU,GAA9B,SAA+C9M,KAAKuM,OAAOL,OAAOpW,KAAlE,kDAIA,IADiB,IAAAka,EAAAhQ,KACV,EAAIA,KAAKkN,YAAY1V,QACxB,GAAIwI,KAAKkN,YAAY,IAAMzT,QAAMG,IAC7BoG,KAAKkN,YAAYrM,OAAO,EAAG,QACxB,GAAIb,KAAKkN,YAAY,IAAMzT,QAAMI,IACpCmG,KAAKkN,YAAYrM,OAAO,EAAG,GACvB,EAAIb,KAAKoP,WAAW5X,SAAuC,GAA7BwI,KAAKoP,WAAW,GAAGX,QAC7CzO,KAAKoP,WAAW,GAAGa,cAAgBF,OAAOG,aAAalQ,KAAKoP,WAAW,GAAGa,cAC9EjQ,KAAKoP,WAAW,GAAG5O,OAAO,OAC1BR,KAAKoP,WAAWe,cAEjB,GAAInQ,KAAKkN,YAAY,IAAMzT,QAAMM,OACpCiG,KAAKkN,YAAYrM,OAAO,EAAG,QACxB,GAAIb,KAAKkN,YAAY,IAAMzT,QAAMC,IAAK,CACzC,GAAIsG,KAAKkN,YAAY1V,OAAS,EAAK,MACnC,IAAI4Y,EAAUpQ,KAAKkN,YAAY,GAC3B5E,EAAMtI,KAAKkN,YAAY,GAC3B,GAAIlN,KAAKkN,YAAY1V,OAAS,EAAI8Q,EAAO,MACzC,GAAItI,KAAKkN,YAAY,EAAI5E,IAAQ7O,QAAME,IAAK,CACxC/B,QAAQC,KAAK,sCACbmI,KAAKkN,eACL,MAEJ,IAAImD,EAAarQ,KAAKkN,YAAYlV,MAAM,EAAG,EAAIsQ,GAC3CgI,GAAa,EAAA3Q,EAAAjH,OAAMsH,KAAKkN,YAAYlV,MAAM,EAAG,EAAIsQ,IACjD1P,EAAMoH,KAAKkN,YAAYlV,MAAM,EAAIsQ,EAAK,EAAIA,GAE9C,GADAtI,KAAKkN,YAAYrM,OAAO,EAAG,EAAIyH,GAC3B1P,EAAI,IAAM0X,EAAW,IAAM1X,EAAI,IAAM0X,EAAW,GAAI,CAEpD,IAAIjI,SAAIT,SACJwI,GAAW3W,QAAMgC,IAAIrB,SAEjB,QADJiO,GAAK,EAAA1I,EAAAtI,UAASgZ,EAAW,GAAIA,EAAW,GAAIA,EAAW,OACpCzY,QAAQC,KAAR,0EAAuFwQ,EAAvF,yBACMA,EAArBgI,EAAW,GAAK,GAAU,EAAA1Q,EAAAtI,UAASgZ,EAAW,GAAIA,EAAW,KAAoC,IAAhBA,EAAW,IAAc,EAAA1Q,EAAAtI,UAASgZ,EAAW,GAAIA,EAAW,KACjJrQ,KAAKoI,KAAO,IAAIf,SAAOrH,KAAMqI,GAC7BzQ,QAAQkL,IAAI,UAAW9C,KAAKoI,KAAMiI,GAClCN,OAAOzW,WAAW,WACV0W,EAAKf,gBAAkBe,EAAKf,eAAee,EAAK5H,OACrD,GACHpI,KAAKoI,KAAKN,OACLnH,KAAK,SAACyH,GACC4H,EAAKd,QACLc,EAAKd,OAAO9G,MAGjBgI,GAAW3W,QAAMgC,IAAIjB,SAC5B6N,GAAK,EAAA1I,EAAAtI,UAASgZ,EAAW,GAAIA,EAAW,GAAIA,EAAW,KAErC,YADlBzI,EAAaP,SAAOQ,iBAAiBQ,KACNzQ,QAAQC,KAAR,mFAAgGwQ,EAAhG,QAA0GT,EAA1G,KAC/B5H,KAAKoI,KAAO,IAAIf,SAAOrH,KAAMqI,GAC7BzQ,QAAQkL,IAAI,UAAWuN,GACvBN,OAAOzW,WAAW,WACV0W,EAAKf,gBAAkBe,EAAKf,eAAee,EAAK5H,OACrD,GACHpI,KAAKoI,KAAKN,OACLnH,KAAK,SAACyH,GACC4H,EAAKd,QACLc,EAAKd,OAAO9G,MAGjBgI,GAAW3W,QAAMgC,IAAIW,SAC5BiM,GAAK,EAAA1I,EAAAtI,UAASgZ,EAAW,GAAIA,EAAW,GAAIA,EAAW,MAEjDxH,QAAW,EAAGM,QAAW,EAAGE,SAAY,EAAGc,SAAY,GAD7DvC,EAAaP,SAAOQ,iBAAiBQ,KAC0CzQ,QAAQC,KAAR,mFAAgGwQ,EAAhG,QAA0GT,EAA1G,KAC/E5H,KAAKoI,KAAO,IAAIf,SAAOrH,KAAMqI,GAC7BzQ,QAAQkL,IAAI,UAAWuN,GACvBN,OAAOzW,WAAW,WACV0W,EAAKf,gBAAkBe,EAAKf,eAAee,EAAK5H,OACrD,GACHpI,KAAKoI,KAAKN,OACLnH,KAAK,SAACyH,GACC4H,EAAKd,QACLc,EAAKd,OAAO9G,MAGjBgI,GAAW3W,QAAMgC,IAAIU,QAC5BvE,QAAQkL,IAAI,SAAUuN,GAClB,EAAIrQ,KAAKoP,WAAW5X,SAAuC,GAA7BwI,KAAKoP,WAAW,GAAGX,OAAe,KAAQzO,KAAKoP,WAAW,GAAGgB,SAAWpQ,KAAKoP,WAAW,GAAGgB,SAAW,MAChIpQ,KAAKoP,WAAW,GAAGa,cAAgBF,OAAOG,aAAalQ,KAAKoP,WAAW,GAAGa,cAC9EjQ,KAAKoP,WAAW,GAAG5O,OAAO,WAC1B5I,QAAQ0V,MAAR,uBAAoC,EAAA3N,EAAAtH,YAAW2H,KAAKoP,WAAW,GAAGgB,UAAlE,cAAyFpQ,KAAKoP,WAAW,GAAGmB,QAA5G,cAAkIvQ,KAAKoP,WAAW,GAAGoB,SACrJxQ,KAAKoP,WAAWe,SAGpBJ,OAAOzW,WAAW,WACV0W,EAAKb,eAAiBa,EAAKb,cAAca,EAAK5H,OACnD,GACHpI,KAAKoI,MAAO,GACLgI,GAAW3W,QAAMgC,IAAIpB,YAC5BgO,GAAK,EAAA1I,EAAAtI,UAASgZ,EAAW,GAAIA,EAAW,GAAIA,EAAW,MAC9C,MACoBhI,EAArBgI,EAAW,GAAK,GAAU,EAAA1Q,EAAAtI,UAASgZ,EAAW,GAAIA,EAAW,KAAoC,IAAhBA,EAAW,IAAc,EAAA1Q,EAAAtI,UAASgZ,EAAW,GAAIA,EAAW,MAErJrQ,KAAKoI,KAAO,IAAIf,SAAOrH,KAAMqI,GAC7BzQ,QAAQkL,IAAI,YAAa9C,KAAKoI,KAAMiI,GAEhCrQ,KAAKiP,gBACLjP,KAAKiP,eAAejP,KAAKoI,MAEzBpI,KAAKmP,eACLnP,KAAKmP,cAAcnP,KAAKoI,MAE5BpI,KAAKoI,MAAO,GACL,EAAIpI,KAAKoP,WAAW5X,SAAuC,GAA7BwI,KAAKoP,WAAW,GAAGX,MACpDzO,KAAKoP,WAAW,GAAGgB,SAAWA,GAC9BpQ,KAAKoP,WAAW,GAAGoB,QAAQ/P,KAAK4P,GAC5BrQ,KAAKoP,WAAW,GAAGoB,QAAQhZ,QAAUwI,KAAKoP,WAAW,GAAGmB,UACpDvQ,KAAKoP,WAAW,GAAGa,cACnBF,OAAOG,aAAalQ,KAAKoP,WAAW,GAAGa,cAE3CjQ,KAAKoP,WAAW,GAAGhW,QAAQ4G,KAAKoP,WAAW,GAAGoB,SAC9CxQ,KAAKoP,WAAWe,SAGpBJ,OAAOzW,WAAW,kBAAM0W,EAAKS,qBAAqB,IAElD7Y,QAAQC,KAAR,+BAA2C,EAAA8H,EAAAtH,YAAW2H,KAAKoP,WAAW,GAAGgB,UAAzE,cAA+F,EAAAzQ,EAAAtH,YAAW+X,IAA1G,OAGJxY,QAAQC,KAAR,sBAAkC,EAAA8H,EAAAtH,YAAW+X,IAA7C,qCAGJxY,QAAQ0V,MAAR,qCAAkD,EAAA3N,EAAAtH,YAAW+X,IAA7D,QAA8E9H,EAA9E,aAA6F,EAAA3I,EAAAtH,WAAUgY,GAAvG,SAA0H,EAAA1Q,EAAAtH,WAAUO,GAApI,iBAAwJ,EAAA+G,EAAAtH,WAAUiY,SAGtK1Y,QAAQC,KAAK,qBAAsBmI,KAAKkN,YAAY,IACpDlN,KAAKkN,YAAYrM,OAAO,EAAG,+CAKnB,IAAA6P,EAAA1Q,KAChB,GAAI,EAAIA,KAAKoP,WAAW5X,SAAuC,GAA7BwI,KAAKoP,WAAW,GAAGX,MAAa,CAC9D,IAAIV,EAAU/N,KAAKoP,WAAW,GAE1BuB,GAAiB5C,EAAQqC,QAASrC,EAAQsC,WAAW7Y,QAAQmB,OAAOoV,EAAQsC,YAC5EzX,GAAM,EAAA+G,EAAAjH,OAAMiY,GACZlV,EAAMmV,OAAOC,aAAapX,QAAMC,KAChCnE,SACJ,IAAKA,EAAI,EAAGA,EAAIob,EAAcnZ,OAAQjC,IAClCkG,GAAOmV,OAAOC,aAAaF,EAAcpb,IAE7C,IAAKA,EAAI,EAAGA,EAAIqD,EAAIpB,OAAQjC,IACxBkG,GAAOmV,OAAOC,aAAajY,EAAIrD,IAEnCkG,GAAOmV,OAAOC,aAAapX,QAAME,KAGjC,IAAImX,EAAOF,OAAOC,aAAapX,QAAMM,QAAU0B,EAC3CsV,EAAQ,IAAIhE,WAAW+D,EAAKtZ,QAChC,IAAKjC,EAAI,EAAGA,EAAIub,EAAKtZ,OAAQjC,IACzBwb,EAAMxb,GAAKub,EAAKtY,WAAWjD,GAE/ByK,KAAKuM,OAAOL,OAAO8E,KAAKhR,KAAM+Q,EAAM/D,QAC/BrM,KAAK,WACF/I,QAAQ0V,MAAR,OAAoB,EAAA3N,EAAAtH,WAAUyY,GAA9B,SAA4CJ,EAAKnE,OAAOL,OAAOpW,KAA/D,KAGIiY,EAAQwC,SAAW,IACnBxC,EAAQ3U,YACRsX,EAAKtB,WAAWe,QAChBJ,OAAOzW,WAAW,kBAAMoX,EAAKD,qBAAqB,MAGzD1N,MAAM,SAACqK,GACJxV,QAAQC,KAAKuV,GACbW,EAAQU,OAAS,IAEzBV,EAAQU,MAAQ,wCAIX2B,EAASC,EAAYY,EAAYC,GAAY,IAAAC,EAAAnR,KACtD,OAAO,IAAI7G,QAAQ,SAACC,EAASoH,GAEzB,IACMxH,EAAUkY,GAA0B,GAEpCE,GACFhB,QAASA,EACTC,WAAYA,EACZE,QANYU,GAA0B,EAOtC7X,QAASA,EACToH,OAAQA,EACRxH,QAASA,EACTyV,OAAQ,EACRwB,kBAAc/W,EACdsX,YAGJY,EAASnB,aAAeF,OAAOzW,WAAW,WAClC,EAAI6X,EAAK/B,WAAW5X,QAAU2Z,EAAK/B,WAAW,KAAOgC,IACrDrB,OAAOG,aAAakB,EAASnB,cAC7BmB,EAAS5Q,OAAO,WAChB5I,QAAQ0V,MAAR,iBAA8B,EAAA3N,EAAAtH,YAAW+Y,EAAShB,UAAlD,cAAyEgB,EAASb,QAAlF,cAAwGa,EAASZ,SACjHW,EAAK/B,WAAWe,QAChBJ,OAAOzW,WAAW,WACd6X,EAAKV,qBACN,KAEE,IAAVzX,GAGHmY,EAAK/B,WAAW3O,KAAK2Q,GACrBD,EAAKV,wDAKL,EAAIzQ,KAAKoP,WAAW5X,SAAuC,GAA7BwI,KAAKoP,WAAW,GAAGX,OACjDsB,OAAOG,aAAalQ,KAAKoP,WAAW,GAAGa,cAE3CF,OAAOG,aAAalQ,KAAKqP,yBAClBb,EAAczC,YAAY/L,KAAKuM,OAAOP,OAC7C,IACIwC,EAAcO,UAAU/O,MAC1B,MAAOoN,IAGT,IACIpN,KAAK+O,YACP,MAAO3B,cAMjBoB,EAAcE,OACVC,eAAgB9V,IAAK,EAAGsN,YAAa,6FACrCwJ,OAAQ9W,IAAK,EAAGsN,YAAa,oFAGjCqI,EAAczC,eACdyC,EAAc6C,IAAM,WAChB,IAAI/Z,KAIJ,OAHArB,OAAOqF,KAAKkT,EAAczC,aAAaxQ,IAAI,SAAC+V,GACxCha,EAAImJ,KAAK+N,EAAczC,YAAYuF,MAEhCha,GAEXkX,EAAc+C,qBAAuB,YACR,SAArBC,IACAvb,OAAOqF,KAAKiT,GAAShT,IAAI,SAACC,GACtB,IACI,IAAI0Q,EAAS,IAAIqC,EAAQ/S,GACrB0Q,GAAUA,EAAOpW,MAAQoW,EAAOuF,QAAUvF,EAAO8E,MAAQ9E,EAAOqB,MAAQrB,EAAOgC,MAC/EhC,EAAOuF,OAAOjD,GAEd5W,QAAQC,KAAK,gBAAiB2D,GAEpC,MAAO4R,GACLxV,QAAQC,KAAK,6BAA8BuV,MAG/CoB,EAAckD,kBAAoB3B,OAAOG,aAAa1B,EAAckD,kBACxElD,EAAckD,iBAAmB3B,OAAOzW,WAAWkY,EAAoB,KAE3EA,IAEJhD,EAAcmD,UAAY,WACtB1b,OAAOqF,KAAKiT,GAAShT,IAAI,SAACC,GACtB,IACI,IAAI0Q,EAAS,IAAIqC,EAAQ/S,GACrB0Q,GAAUA,EAAOpW,MAAQoW,EAAOuF,QAAUvF,EAAO8E,MAAQ9E,EAAOqB,MAAQrB,EAAOgC,MAC/EhC,EAAO0F,IAAIpD,GAEX5W,QAAQC,KAAK,gBAAiB2D,GAEpC,MAAO4R,GACLxV,QAAQC,KAAK,6BAA8BuV,OAIvDoB,EAAce,QAAU,SAACsC,KACzBrD,EAAcO,UAAY,SAAC8C,gGC7W3B,IAAYC,IAAZ3c,EAAA,IACY4c,IAAZ5c,EAAA,IACAkZ,EAAAlZ,EAAA,GACA6c,EAAA7c,EAAA,GACA8c,EAAA9c,EAAA,4JAEO,IAAM+c,QACTJ,UAAWA,EACXC,MAAOA,EACPI,QAAStS,YACT4L,YAAa+C,gBACb4D,KAAM/K,SACNgL,OAAQ,cAGZtC,OAAOuC,iBAAiB,OAAQ,WAC5B9D,gBAAc+C,uBACVW,EAAGG,QACHH,EAAGG,WAER,aAEYH,EAEfnC,OAAOmC,GAAKA","file":"si.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","export const isByte = (byte) => (\n    Number(byte) === byte &&\n    Math.floor(byte) === byte &&\n    byte < 0x100\n);\n\nexport const arr2big = (arr) => {\n    var outnum = 0;\n    for (var i = 0; i < arr.length; i++) {\n        const byte = arr[i];\n        if (!isByte(byte)) {\n            throw new Error('Array elements need to be bytes');\n        }\n        outnum += byte * Math.pow(0x100, arr.length - i - 1);\n    }\n    return outnum;\n};\n\nexport const arr2time = (arr) => {\n    if (arr.length == 2) {\n        if (arr[0] == 0xEE && arr[1] == 0xEE) {\n            return null;\n        }\n        return arr2big(arr);\n    }\n    console.warn(`arr2time: length must be 2, but is ${arr.length}`);\n    return -2;\n};\n\nexport const arr2date = (arr) => {\n    if (arr.length == 7 || arr.length == 6) {\n        var secs = arr2big(arr.slice(4, 6));\n        return new Date(arr[0] + 2000, arr[1] - 1, arr[2], (arr[3] & 0x01) * 12 + Math.floor(secs / 3600), Math.floor((secs % 3600) / 60), secs % 60, (arr.length == 7 ? arr[6] * 1000 / 256 : 0));\n    } else if (arr.length == 3) {\n        return new Date(2000 + arr[0], arr[1] - 1, arr[2]);\n    }\n    console.warn(`arr2date: length must be 3, 6 or 7, but is ${arr.length}`);\n    return new Date(1970, 1, 1);\n};\n\nexport const arr2cardNumber = (arr) => {\n    if (arr.length == 4 || arr.length == 3) {\n        var cardnum = (arr[1] << 8);\n        cardnum |= arr[0];\n        var fourthSet = (arr.length == 4 && arr[3] != 0x00);\n        if (!fourthSet && 1 < arr[2] && arr[2] < 5) {\n            cardnum += (arr[2] * 100000);\n        } else if (fourthSet || 4 < arr[2]) {\n            cardnum += (arr[2] << 16);\n        }\n        if (3 < arr.length) { cardnum |= (arr[3] << 24); }\n        return cardnum;\n    }\n    console.warn(`arr2cardNumber: length must be 3 or 4, but is ${arr.length}`);\n    return -1;\n};\n\nexport const prettyHex = (str) => {\n    var outstr = '';\n    if (typeof str === 'string') {\n        let i;\n        for (i = 0; i < str.length; i++) {\n            outstr += `${(`00${str.charCodeAt(i).toString(16)}`).slice(-2)} `;\n        }\n    } else {\n        let i;\n        for (i = 0; i < str.length; i++) {\n            outstr += `${(`00${str[i].toString(16)}`).slice(-2)} `;\n        }\n    }\n    return outstr;\n};\n\nexport const CRC16 = (str) => {\n    var CRC_POLYNOM = 0x8005;\n    var CRC_BITF = 0x8000;\n    if (str.length < 3) {\n        return [(1 <= str.length ? str[0] : 0x00), (2 <= str.length ? str[1] : 0x00)];\n    }\n    const s = str.length % 2 == 0 ? str.concat([0x00, 0x00]) : str.concat([0x00]);\n    var crc = s[0] * 0x100 + s[1];\n    for (var i = 2; i < s.length; i += 2) {\n        var c = s.slice(i, i + 2);\n        var val = c[0] * 0x100 + c[1];\n        for (var j = 0; j < 16; j++) {\n            if ((crc & CRC_BITF) != 0) {\n                crc = (crc << 1);\n                if ((val & CRC_BITF) != 0) { crc += 1; }\n                crc = (crc ^ CRC_POLYNOM);\n            } else {\n                crc = (crc << 1);\n                if ((val & CRC_BITF) != 0) { crc += 1; }\n            }\n            val = (val << 1);\n        }\n        crc = (crc & 0xFFFF);\n    }\n    return [(crc >> 8), (crc & 0xFF)];\n};\n\nexport const timeoutResolvePromise = (value, timeout = 1) =>\n    new Promise((resolve, _reject) =>\n        setTimeout(() => resolve(value), timeout));\n\nexport const timeoutRejectPromise = (reason, timeout) =>\n    new Promise((resolve, _reject) =>\n        setTimeout(() => resolve(reason), timeout));\n","export const proto = {\n    // Protocol characters\n    STX: 0x02,\n    ETX: 0x03,\n    ACK: 0x06, // when sent to BSx3..6, causes beep until SI-card taken out\n    NAK: 0x15,\n    DLE: 0x10,\n    WAKEUP: 0xFF,\n\n    // Basic protocol commands, currently unused\n    basicCmd: {\n        SET_CARDNO: 0x30,\n        GET_SI5: 0x31, // read out SI-card 5 data\n        SI5_WRITE: 0x43, // 02 43 (block: 0x30 to 0x37) (16 bytes) 03\n        SI5_DET: 0x46, // SI-card 5 inserted (46 49) or removed (46 4F)\n        TRANS_REC: 0x53, // autosend timestamp (online control)\n        TRANS_TIME: 0x54, // autosend timestamp (lightbeam trigger)\n        GET_SI6: 0x61, // read out SI-card 6 data\n        SI6_DET: 0x66, // SI-card 6 inserted\n        SET_MS: 0x70, // \\x4D=\"M\"aster, \\x53=\"S\"lave\n        GET_MS: 0x71,\n        SET_SYS_VAL: 0x72,\n        GET_SYS_VAL: 0x73,\n        GET_BDATA: 0x74, // Note: response carries '\\xC4'!\n        ERASE_BDATA: 0x75,\n        SET_TIME: 0x76,\n        GET_TIME: 0x77,\n        OFF: 0x78,\n        GET_BDATA2: 0x7A, // Note: response carries '\\xCA'!\n        SET_BAUD: 0x7E, // 0=4800 baud, 1=38400 baud\n    },\n    basicCmdLookup: () => {\n        if (proto._basicCmdLookup) {\n            return proto._basicCmdLookup;\n        }\n        proto._basicCmdLookup = {};\n        Object.keys(proto.basicCmd).map((k) => {\n            proto._basicCmdLookup[proto.basicCmd[k]] = k;\n        });\n        return proto._basicCmdLookup;\n    },\n\n    // Extended protocol commands\n    cmd: {\n        GET_BACKUP: 0x81,\n        SET_SYS_VAL: 0x82,\n        GET_SYS_VAL: 0x83,\n        SRR_WRITE: 0xA2, // ShortRangeRadio - SysData write\n        SRR_READ: 0xA3, // ShortRangeRadio - SysData read\n        SRR_QUERY: 0xA6, // ShortRangeRadio - network device query\n        SRR_PING: 0xA7, // ShortRangeRadio - heartbeat from linked devices, every 50 seconds\n        SRR_ADHOC: 0xA8, // ShortRangeRadio - ad-hoc message, f.ex. from SI-ActiveCard\n        GET_SI5: 0xB1, // read out SI-card 5 data\n        TRANS_REC: 0xD3, // autosend timestamp (online control)\n        CLEAR_CARD: 0xE0, // found on SI-dev-forum: 02 E0 00 E0 00 03 (http://www.sportident.com/en/forum/8/56#59)\n        GET_SI6: 0xE1, // read out SI-card 6 data block\n        SET_SI6: 0xE2, // write SI-card 6 line (16 bytes)\n        SET_SI6_SPECIAL: 0xE4, // write SI-card 6 special fields (e.g. start number)\n        SI5_DET: 0xE5, // SI-card 5 inserted\n        SI6_DET: 0xE6, // SI-card 6 inserted\n        SI_REM: 0xE7, // SI-card removed\n        SI8_DET: 0xE8, // SI-card 8/9/10/11/p/t inserted\n        SET_SI8: 0xEA, // write SI-card 8/9/10/11/p/t data word\n        GET_SI8: 0xEF, // read out SI-card 8/9/10/11/p/t data block\n        SET_MS: 0xF0, // \\x4D=\"M\"aster, \\x53=\"S\"lave\n        GET_MS: 0xF1,\n        ERASE_BDATA: 0xF5,\n        SET_TIME: 0xF6,\n        GET_TIME: 0xF7,\n        OFF: 0xF8,\n        SIGNAL: 0xF9, // 02 F9 (number of signals) (CRC16) 03\n        SET_BAUD: 0xFE, // \\x00=4800 baud, \\x01=38400 baud\n    },\n    cmdLookup: () => {\n        if (proto._cmdLookup) {\n            return proto._cmdLookup;\n        }\n        proto._cmdLookup = {};\n        Object.keys(proto.cmd).map((k) => {\n            proto._cmdLookup[proto.cmd[k]] = k;\n        });\n        return proto._cmdLookup;\n    },\n\n    // Protocol Parameters\n    P_MS_DIRECT: 0x4D, // \"M\"aster\n    P_MS_INDIRECT: 0x53, // \"S\"lave\n    P_SI6_CB: 0x08,\n\n    // offsets in system data\n    // currently only O_MODE, O_STATION_CODE and O_PROTO are used\n    sysDataOffset: {\n        OLD_SERIAL: 0x00, // 2 bytes - only up to BSx6, numbers < 65.536\n        OLD_CPU_ID: 0x02, // 2 bytes - only up to BSx6, numbers < 65.536\n        SERIAL_NO: 0x00, // 4 bytes - only after BSx7, numbers > 70.000 (if byte 0x00 > 0, better use OLD offsets)\n        FIRMWARE: 0x05, // 3 bytes\n        BUILD_DATE: 0x08, // 3 bytes - YYMMDD\n        MODEL_ID: 0x0B, // 2 bytes:\n        //   8003: BSF3 (serial numbers > 1.000)\n        //   8004: BSF4 (serial numbers > 10.000)\n        //   8084: BSM4-RS232\n        //   8086: BSM6-RS232 / BSM6-USB\n        //   8146: BSF6 (serial numbers > 30.000)\n        //   8115: BSF5 (serial numbers > 50.000)\n        //   8117 / 8118: BSF7 / BSF8 (serial no. 70.000...70.521, 72.002...72.009)\n        //   8187 / 8188: BS7-SI-Master / BS8-SI-Master\n        //   8197: BSF7 (serial numbers > 71.000, apart from 72.002...72.009)\n        //   8198: BSF8 (serial numbers > 80.000)\n        //   9197 / 9198: BSM7-RS232, BSM7-USB / BSM8-USB, BSM8-SRR\n        //   9199: unknown\n        //   9597: BS7-S\n        //   B197 / B198: BS7-P / BS8-P\n        //   B897: BS7-GSM\n        MEM_SIZE: 0x0D, // 1 byte - in KB\n        REFRESH_RATE: 0x10, // 1 byte - in 3/sec\n        POWER_MODE: 0x11, // 1 byte - 06 low power, 08 standard/sprint\n\n        BAT_DATE: 0x15, // 3 bytes - YYMMDD\n        BAT_CAP: 0x19, // 2 bytes - battery capacity in mAh (as multiples of 14.0625?!)\n        BACKUP_PTR: 0x1C, // 4 bytes - at positions 1C,1D,21,22\n        SI6_CB: 0x33, // 1 byte - bitfield defining which SI Card 6 blocks to read: \\x00=\\xC1=read block0,6,7; \\x08=\\xFF=read all 8 blocks\n        BAT_STATE: 0x34, // 4 bytes - for battery state: 2000mAh: 000000=0%, 6E0000=100%, 1000mAh:000000=0%, 370000=100%\n        MEM_OVERFLOW: 0x3D, // 1 byte - memory overflow if != 0x00\n\n        INTERVAL: 0x48, // 2 bytes - in 32*ms\n        WTF: 0x4A, // 2 bytes - in 32*ms\n\n        PROGRAM: 0x70, // 1 byte - station program: xx0xxxxxb competition, xx1xxxxxb training\n        MODE: 0x71, // 1 byte - see SI station modes below\n        STATION_CODE: 0x72, // 1 byte\n        PROTO: 0x74, // 1 byte - protocol configuration, bit mask value:\n        //   xxxxxxx1b extended protocol\n        //   xxxxxx1xb auto send out\n        //   xxxxx1xxb handshake (only valid for card readout)\n        //   xxxx1xxxb sprint 4ms (only for Start&Finish modes)\n        //   xxx1xxxxb access with password only\n        //   xx1xxxxxb stop, if backup is full (only for Readout mode)\n        //   1xxxxxxxb read out SI-card after punch (only for punch modes;\n        //             depends on bit 2: auto send out or handshake)\n        LAST_WRITE_DATE: 0x75, // 3 bytes - YYMMDD\n        LAST_WRITE_TIME: 0x78, // 3 bytes - 1 byte day (see below), 2 bytes seconds after midnight/midday\n        SLEEP_TIME: 0x7B, // 3 bytes - 1 byte day (see below), 2 bytes seconds after midnight/midday\n        //   xxxxxxx0b - seconds relative to midnight/midday: 0 = am, 1 = pm\n        //   xxxx000xb - day of week: 000 = Sunday, 110 = Saturday\n        //   xx00xxxxb - week counter 0..3, relative to programming date\n        WORKING_TIME: 0x7E, // 2 bytes - big endian number = minutes\n    },\n\n    // SI station modes\n    M_CONTROL: 0x02,\n    M_START: 0x03,\n    M_FINISH: 0x04,\n    M_READ_SICARDS: 0x05,\n    M_CLEAR: 0x07,\n    M_CHECK: 0x0A,\n    M_PRINTOUT: 0x0B,\n\n    // Weekday encoding (only for reference, currently unused)\n    D_SUNDAY: 0b000,\n    D_MONDAY: 0b001,\n    D_TUESDAY: 0b010,\n    D_WEDNESDAY: 0b011,\n    D_THURSDAY: 0b100,\n    D_FRIDAY: 0b101,\n    D_SATURDAY: 0b110,\n\n    // Backup memory record length\n    REC_LEN: 8, // Only in extended protocol, otherwise 6!\n\n    // punch trigger in control mode data structure\n    T_OFFSET: 8,\n    T_CN: 0,\n    T_TIME: 5,\n\n    // backup memory in control mode\n    BC_CN: 3,\n    BC_TIME: 8,\n};\n","import {arr2big, arr2date, timeoutResolvePromise} from './utils';\nimport {proto} from './constants';\n\nexport class SiStation {\n    constructor(mainStation) {\n        this.mainStation = mainStation;\n        this._info = {};\n        this._infoTime = 0;\n        this._infoSubscribers = [];\n    }\n\n    static modeLookup() {\n        if (SiStation._modeLookup) { return SiStation._modeLookup; }\n        SiStation._modeLookup = {};\n        Object.keys(SiStation.Mode).map((k) => {\n            SiStation._modeLookup[SiStation.Mode[k].val] = k;\n        });\n        return SiStation._modeLookup;\n    }\n\n    static typeLookup() {\n        if (SiStation._typeLookup) { return SiStation._typeLookup; }\n        SiStation._typeLookup = {};\n        Object.keys(SiStation.Type).map((k) => {\n            SiStation._typeLookup[SiStation.Type[k].val] = k;\n        });\n        return SiStation._typeLookup;\n    }\n\n    static modelLookup() {\n        if (SiStation._modelLookup) { return SiStation._modelLookup; }\n        SiStation._modelLookup = {};\n        Object.keys(SiStation.Model).map((k) => {\n            SiStation.Model[k].vals.map((val) => {\n                SiStation._modelLookup[val] = k;\n            });\n        });\n        return SiStation._modelLookup;\n    }\n\n    readInfo(force) {\n        var now = new Date().getTime();\n        if (!force && now < this._infoTime + 60000) {\n            return timeoutResolvePromise(this._info);\n        }\n        if (!force && 0 < this._infoSubscribers.length) {\n            return new Promise((resolve, reject) => {\n                this._infoSubscribers.push({resolve: resolve, reject: reject});\n            });\n        }\n        return this.mainStation._sendCommand(proto.cmd.GET_SYS_VAL, [0x00, 0x80], 1)\n            .then((d) => {\n                const data = d[0];\n                data.splice(0, 3);\n                this._infoTime = new Date().getTime();\n                this._info = {};\n                this._info._raw = data;\n                this._info.serialNumber = arr2big(data.slice(0x00, 0x04));\n                this._info.firmwareVersion = arr2big(data.slice(0x05, 0x08));\n                this._info.buildDate = arr2date(data.slice(0x08, 0x0B));\n                this._info.deviceModel = SiStation.modelLookup()[arr2big(data.slice(0x0B, 0x0D))];\n                this._info.memorySize = arr2big(data.slice(0x0D, 0x0E));\n                this._info.refreshRate = data[0x10]; // in 3/sec\n                this._info.powerMode = data[0x11]; // 06 low power, 08 standard/sprint\n                this._info.batteryDate = arr2date(data.slice(0x15, 0x18));\n                this._info.batteryCapacity = arr2big(data.slice(0x19, 0x1B));\n                this._info.backupPointer = arr2big(data.slice(0x1C, 0x1E).concat(data.slice(0x21, 0x23)));\n                this._info.siCard6Mode = arr2big(data.slice(0x33, 0x34));\n                this._info.memoryOverflow = arr2big(data.slice(0x3D, 0x3E));\n                this._info.interval = arr2big(data.slice(0x48, 0x4A));\n                this._info.wtf = arr2big(data.slice(0x4A, 0x4C));\n                this._info.program = data[0x70];\n                this._info.mode = SiStation.modeLookup()[data[0x71]];\n                this._info.code = data[0x72] + ((data[0x73] & 0xC0) << 2);\n                this._info.beeps = ((data[0x73] >> 2) & 0x01);\n                this._info.flashes = (data[0x73] & 0x01);\n                this._info.extendedProtocol = (data[0x74] & 0x01);\n                this._info.autoSend = ((data[0x74] >> 1) & 0x01);\n                this._info.handshake = ((data[0x74] >> 2) & 0x01);\n                this._info.sprint4ms = ((data[0x74] >> 3) & 0x01);\n                this._info.passwordOnly = ((data[0x74] >> 4) & 0x01);\n                this._info.stopOnFullBackup = ((data[0x74] >> 5) & 0x01);\n                this._info.autoReadout = ((data[0x74] >> 7) & 0x01);\n                this._info.lastWriteDate = arr2date(data.slice(0x75, 0x7B));\n                // this._info.autoOffTimeout = arr2date([0, 1, 1].concat(data.slice(0x7B, 0x7E)));\n                this._info.autoOffTimeout = arr2big(data.slice(0x7E, 0x80));\n                this._infoSubscribers.map((infoSubscriber) => setTimeout(() => infoSubscriber.resolve(this._info), 1));\n                this._infoSubscribers = [];\n                console.log('INFO READ', this._info);\n                return this._info;\n            })\n            .catch((_err) => {\n                this._infoSubscribers.map((infoSubscriber) => setTimeout(() => infoSubscriber.reject(), 1));\n                this._infoSubscribers = [];\n                throw new Error('READ INFO');\n            });\n    }\n\n    time(newTime) {\n        if (newTime === undefined) {\n            return this.mainStation._sendCommand(proto.cmd.GET_TIME, [], 1)\n                .then((d) => arr2date(d[0].slice(2)));\n        }\n        // TODO: compensate for waiting time\n        var secs = (newTime.getHours() % 12) * 3600 + newTime.getMinutes() * 60 + newTime.getSeconds();\n        var params = [\n            newTime.getFullYear() % 100,\n            newTime.getMonth() + 1,\n            newTime.getDate(),\n            (newTime.getDay() << 1) + Math.floor(newTime.getHours() / 12),\n            secs >> 8,\n            secs & 0xFF,\n            Math.floor(newTime.getMilliseconds() * 256 / 1000),\n        ];\n        return this.mainStation._sendCommand(proto.cmd.SET_TIME, params, 1)\n            .then((d) => arr2date(d[0].slice(2)));\n\n    }\n\n    signal(countArg) {\n        const count = !countArg || countArg < 1 ? 1 : countArg;\n        return this.mainStation._sendCommand(proto.cmd.SIGNAL, [count], 1)\n            .then((data) => {\n                if (data[0][2] !== count) {\n                    throw new Error('NUM BEEPS');\n                }\n            });\n    }\n\n    powerOff() { // Does not power off BSM8 (USB powered), though\n        return this.mainStation._sendCommand(proto.cmd.OFF, [], 0);\n    }\n\n    info(property, paramsFunc, newValue) {\n        if (newValue === undefined) {\n            return this.readInfo(false)\n                .then((info) => info[property]);\n        }\n        let params = undefined;\n        return this.readInfo(false)\n            .then((info) => {\n                params = paramsFunc(info);\n                if (!params) {\n                    throw new Error('INVALID_PARAM');\n                }\n                return this.mainStation._sendCommand(proto.cmd.SET_SYS_VAL, params, 1);\n            })\n            .then((d) => {\n                const data = d[0];\n                data.splice(0, 2);\n                if (data[0] != params[0]) {\n                    throw new Error('SET_CODE_RESP_ERR');\n                }\n                return this.readInfo(true);\n            })\n            .then((info) => info[property]);\n    }\n\n    // TODO: program (0x70)\n\n    code(newCode) {\n        return this.info('code', (info) => [0x72, newCode & 0xFF, ((newCode & 0x0300) >> 2) + (info._raw[0x73] & 0x3F)], newCode);\n    }\n\n    mode(newMode) {\n        return this.info('mode', (_info) => {\n            const modeLookup = SiStation.modeLookup();\n            const newModeVal = newMode.hasOwnProperty('val') ? newMode.val : newMode;\n            if (modeLookup[newModeVal] == undefined) {\n                return false;\n            }\n            return [0x71, newModeVal];\n        }, newMode);\n    }\n\n    beeps(newBeeps) {\n        return this.info('beeps', (info) => [0x73, (newBeeps ? 0x04 : 0x00) + (info._raw[0x73] & 0xFB)], newBeeps);\n    }\n\n    flashes(newFlashes) {\n        return this.info('flashes', (info) => [0x73, (newFlashes ? 0x01 : 0x00) + (info._raw[0x73] & 0xFE)], newFlashes);\n    }\n\n    autoSend(newAutoSend) {\n        return this.info('autoSend', (info) => [0x74, (newAutoSend ? 0x02 : 0x00) + (info._raw[0x74] & 0xFD)], newAutoSend);\n    }\n\n    extendedProtocol(newExtendedProtocol) {\n        return this.info('extendedProtocol', (info) => [0x74, (newExtendedProtocol ? 0x01 : 0x00) + (info._raw[0x74] & 0xFE)], newExtendedProtocol);\n    }\n\n    serialNumber() {\n        return this.info('serialNumber', () => false, undefined);\n    }\n\n    firmwareVersion() {\n        return this.info('firmwareVersion', () => false, undefined);\n    }\n\n    buildDate() {\n        return this.info('buildDate', () => false, undefined);\n    }\n\n    deviceModel() {\n        return this.info('deviceModel', () => false, undefined);\n    }\n\n    memorySize() {\n        return this.info('memorySize', () => false, undefined);\n    }\n\n    batteryDate() {\n        return this.info('batteryDate', () => false, undefined);\n    }\n\n    batteryCapacity() {\n        return this.info('batteryCapacity', () => false, undefined);\n    }\n\n    backupPointer() {\n        return this.info('backupPointer', () => false, undefined);\n    }\n\n    siCard6Mode() {\n        return this.info('siCard6Mode', () => false, undefined);\n    }\n\n    memoryOverflow() {\n        return this.info('memoryOverflow', () => false, undefined);\n    }\n\n    lastWriteDate() {\n        return this.info('lastWriteDate', () => false, undefined);\n    }\n\n    autoOffTimeout() {\n        return this.info('autoOffTimeout', () => false, undefined);\n    }\n}\nSiStation.Mode = {\n    SIACSpecialFunction1: {val: 0x01},\n    Control: {val: 0x02},\n    Start: {val: 0x03},\n    Finish: {val: 0x04},\n    Readout: {val: 0x05},\n    Clear: {val: 0x07},\n    Check: {val: 0x0A},\n    Print: {val: 0x0B},\n    StartWithTimeTrigger: {val: 0x0C},\n    FinishWithTimeTrigger: {val: 0x0D},\n    BCControl: {val: 0x12},\n    BCStart: {val: 0x13},\n    BCFinish: {val: 0x14},\n    BCSlave: {val: 0x1F},\n};\n\nSiStation.Type = { // TODO: meaningful val-s\n    Main: {val: 0x00},\n    Sprint: {val: 0x01},\n    Print: {val: 0x02},\n    Field: {val: 0x03},\n    Master: {val: 0x04},\n};\n\nSiStation.Model = {\n    BSF3: {vals: [0x8003], description: 'BSF3', type: SiStation.Type.Field, series: 3},\n    BSF4: {vals: [0x8004], description: 'BSF4', type: SiStation.Type.Field, series: 4},\n    BSF5: {vals: [0x8115], description: 'BSF5', type: SiStation.Type.Field, series: 5},\n    BSF6: {vals: [0x8146], description: 'BSF6', type: SiStation.Type.Field, series: 6},\n    BSF7: {vals: [0x8117, 0x8197], description: 'BSF7', type: SiStation.Type.Field, series: 7},\n    BSF8: {vals: [0x8118, 0x8198], description: 'BSF8', type: SiStation.Type.Field, series: 8},\n    BS7Master: {vals: [0x8187], description: 'BS7-Master', type: SiStation.Type.Master, series: 7},\n    BS8Master: {vals: [0x8188], description: 'BS8-Master', type: SiStation.Type.Master, series: 8},\n    BSM4: {vals: [0x8084], description: 'BSM4', type: SiStation.Type.Main, series: 4},\n    BSM6: {vals: [0x8086], description: 'BSM6', type: SiStation.Type.Main, series: 6},\n    BSM7: {vals: [0x9197], description: 'BSM7', type: SiStation.Type.Main, series: 7},\n    BSM8: {vals: [0x9198], description: 'BSM8', type: SiStation.Type.Main, series: 8},\n    BS7S: {vals: [0x9597], description: 'BS7-S', type: SiStation.Type.Sprint, series: 7},\n    BS7P: {vals: [0xB197], description: 'BS7-P', type: SiStation.Type.Print, series: 7},\n    BS7GSM: {vals: [0xB897], description: 'BS7-GSM', type: SiStation.Type.Field, series: 7},\n    BS8P: {vals: [0xB198], description: 'BS8-P', type: SiStation.Type.Print, series: 8},\n};\n","import {arr2big, arr2time} from './utils';\nimport {proto} from './constants';\n\nexport class SiCard {\n    constructor(mainStation, cardNumber) {\n        this.mainStation = mainStation;\n        this.cardNumber = cardNumber;\n        this.clearTime = -1;\n        this.checkTime = -1;\n        this.startTime = -1;\n        this.finishTime = -1;\n        this.punches = [];\n    }\n\n    read() {\n        var typeFromCN = SiCard.typeByCardNumber(this.cardNumber);\n        return SiCard.Type[typeFromCN].read(this);\n    }\n\n    type() {\n        return SiCard.typeByCardNumber(this.cardNumber);\n    }\n\n    toDict() {\n        return {\n            cardNumber: this.cardNumber,\n            clearTime: this.clearTime,\n            checkTime: this.checkTime,\n            startTime: this.startTime,\n            finishTime: this.finishTime,\n            punches: this.punches,\n        };\n    }\n\n    toString() {\n        return `${this.type()} Number: ${this.cardNumber}\nClear: ${this.clearTime}\nCheck: ${this.checkTime}\nStart: ${this.startTime}\nFinish: ${this.finishTime}\n${this.punches.map((punch) => `${punch.code}: ${punch.time}`).join('\\n')}\n`;\n    }\n\n    toHtml() {\n        return this.toString().replace(/\\n/g, '<br />');\n    }\n}\nSiCard.Type = {\n    SICard5: {vals: [1000, 500000], description: 'SI Card 5', read: (card) =>\n        card.mainStation._sendCommand(proto.cmd.GET_SI5, [], 1)\n            .then((d) => {\n                const data = d[0];\n                data.splice(0, 2);\n                var cn = arr2big([data[6], data[4], data[5]]);\n                if (499999 < cn) { console.warn(`SICard5 Error: SI Card Number inconsistency: SI5 detected, but number is ${cn} (not in 0 - 500'000)`); }\n                if (data[6] < 2) {\n                    cn = arr2big([data[4], data[5]]);\n                } else {\n                    cn = data[6] * 100000 + arr2big([data[4], data[5]]);\n                }\n                if (card.cardNumber != cn) { console.warn('SICard5 Error: SI Card Number inconsistency'); }\n\n                card.startTime = arr2time(data.slice(19, 21));\n                card.finishTime = arr2time(data.slice(21, 23));\n                card.checkTime = arr2time(data.slice(25, 27));\n                // TODO: also read the 6(?) additional punch codes without times\n                var len = Math.min(Math.max(data[23] - 1, 0), 30);\n                card.punches = new Array(len);\n                var ind = 32;\n                for (var i = 0; i < len; i++) {\n                    if ((ind % 16) == 0) {\n                        ind++;\n                    }\n                    var time = arr2time(data.slice(ind + 1, ind + 3));\n                    if (0 <= time) {\n                        card.punches[i] = {code: data[ind + 0], time: time};\n                    } else {\n                        console.warn('SICard5 Error: Undefined Time in punched range');\n                    }\n                    ind += 3;\n                }\n                card.mainStation._sendCommand(proto.ACK, [], 0);\n                return card;\n            }),\n    },\n    SICard6: {vals: [500000, 1000000, 2003000, 2004000], description: 'SI Card 6', read: (card) =>\n        card.mainStation._sendCommand(proto.cmd.GET_SI6, [0x08], 3)\n            .then((data) => {\n                if (data[0][2] != 0) { console.warn(`SICard6 Error: First read block is ${data[0][2]} (expected 0)`); }\n                if (data[1][2] != 6) { console.warn(`SICard6 Error: Second read block is ${data[1][2]} (expected 6)`); }\n                if (data[2][2] != 7) { console.warn(`SICard6 Error: Third read block is ${data[2][2]} (expected 7)`); }\n                data[0].splice(0, 3);\n                data[1].splice(0, 3);\n                data[2].splice(0, 3);\n                var cn = arr2big([data[0][11], data[0][12], data[0][13]]);\n                if (card.cardNumber != cn) { console.warn('SICard6 Error: SI Card Number inconsistency'); }\n\n                card.startTime = arr2time(data[0].slice(26, 28));\n                card.finishTime = arr2time(data[0].slice(22, 24));\n                card.checkTime = arr2time(data[0].slice(30, 32));\n                card.clearTime = arr2time(data[0].slice(34, 36));\n                var len = Math.min(Math.max(data[0][18] - 1, 0), 64);\n                card.punches = new Array(len);\n                var blk = 1;\n                var ind = 0;\n                for (var i = 0; i < len; i++) {\n                    if (128 <= ind) {\n                        blk++;\n                        ind = 0;\n                    }\n                    var time = arr2time(data[blk].slice(ind + 2, ind + 4));\n                    if (0 <= time) {\n                        card.punches[i] = {code: data[blk][ind + 1], time: time};\n                    } else {\n                        console.warn('SICard6 Error: Undefined Time in punched range');\n                    }\n                    ind += 4;\n                }\n                card.mainStation._sendCommand(proto.ACK, [], 0);\n                return card;\n            }),\n    },\n    SICard8: {vals: [2000000, 2003000, 2004000, 3000000], description: 'SI Card 8', read: (card) => {\n        let len = undefined;\n        return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x00], 1)\n            .then((data0) => {\n                console.assert(data0[0][2] === 0, 'Inconsistent');\n                const page0 = data0[0].slice(3);\n                var cn = arr2big([page0[25], page0[26], page0[27]]);\n                if (card.cardNumber != cn) {\n                    console.warn('SICard8 Error: SI Card Number inconsistency');\n                }\n\n                card.startTime = arr2time(page0.slice(14, 16));\n                card.finishTime = arr2time(page0.slice(18, 20));\n                card.checkTime = arr2time(page0.slice(10, 12));\n                len = Math.min(Math.max(page0[22], 0), 128);\n                card.punches = new Array(len);\n\n                return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x01], 1);\n            })\n            .then((data1) => {\n                console.assert(data1[0][2] === 1, 'Inconsistent');\n                const page1 = data1[0].slice(3);\n                for (let i = 0; i < 30; i++) {\n                    if (i >= len) {\n                        break;\n                    }\n                    var time = arr2time(page1.slice(i * 4 + 10, i * 4 + 12));\n                    if (0 <= time) {\n                        card.punches[i] = {\n                            code: page1[i * 4 + 9],\n                            time: time,\n                        };\n                    } else {\n                        console.warn('SICard8 Error: Undefined Time in punched range');\n                    }\n                }\n                return card.mainStation._sendCommand(proto.ACK, [], 0).then(() => card);\n            });\n    }},\n    SICard9: {vals: [1000000, 2000000], description: 'SI Card 9', read: (card) => {\n        let len = undefined;\n        return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x00], 1)\n            .then((data0) => {\n                console.assert(data0[0][2] === 0, 'Inconsistent');\n                const page0 = data0[0].slice(3);\n                var cn = arr2big([page0[25], page0[26], page0[27]]);\n                if (card.cardNumber != cn) {\n                    console.warn('SICard9 Error: SI Card Number inconsistency');\n                }\n\n                card.startTime = arr2time(page0.slice(14, 16));\n                card.finishTime = arr2time(page0.slice(18, 20));\n                card.checkTime = arr2time(page0.slice(10, 12));\n                len = Math.min(Math.max(page0[22], 0), 128);\n                card.punches = new Array(len);\n\n                let isLastBlock = false;\n                for (let i = 0; i < 18; i++) {\n                    if (i >= len) {\n                        isLastBlock = true;\n                        break;\n                    }\n                    const time = arr2time(page0.slice(i * 4 + 58, i * 4 + 60));\n                    if (0 <= time) {\n                        card.punches[i] = {\n                            code: page0[i * 4 + 57],\n                            time: time,\n                        };\n                    } else {\n                        console.warn('SICard9 Error: Undefined Time in punched range');\n                    }\n                }\n                if (isLastBlock) {\n                    return card.mainStation._sendCommand(proto.ACK, [], 0).then(() => card);\n                }\n\n                return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x01], 1).then((data1) => {\n                    console.assert(data1[0][2] === 1, 'Inconsistent');\n                    const page1 = data1[0].slice(3);\n                    for (let i = 18; i < 50; i++) {\n                        if (i >= len) {\n                            break;\n                        }\n                        const time = arr2time(page1.slice(i * 4 - 70, i * 4 - 68));\n                        if (0 <= time) {\n                            card.punches[i] = {\n                                code: page1[i * 4 - 71],\n                                time: time,\n                            };\n                        } else {\n                            console.warn('SICard9 Error: Undefined Time in punched range');\n                        }\n                    }\n                    return card.mainStation._sendCommand(proto.ACK, [], 0).then(() => card);\n                });\n            });\n    }},\n    SICard10: {vals: [7000000, 8000000], description: 'SI Card 10', read: (card) => {\n        const readSiCard10TimeBlock = (blockData, punchData, blockIndex, punchCount) => {\n            let isLastBlock = false;\n            const punchesPerBlock = 32;\n            for (let i = 0; i < punchesPerBlock; i++) {\n                if (blockIndex * punchesPerBlock + i >= punchCount) {\n                    isLastBlock = true;\n                    break;\n                }\n                var time = arr2time(blockData.slice(i * 4 + 2, i * 4 + 4));\n                if (0 <= time) {\n                    punchData[blockIndex * punchesPerBlock + i] = {\n                        code: blockData[i * 4 + 1],\n                        time: time,\n                    };\n                } else {\n                    console.warn('SICard10 Error: Undefined Time in punched range');\n                }\n            }\n            return isLastBlock;\n        };\n        let len = undefined;\n        return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x00], 1)\n            .then((data0) => {\n                console.assert(data0[0][2] === 0, 'Inconsistent');\n                const page0 = data0[0].slice(3);\n                var cn = arr2big([page0[25], page0[26], page0[27]]);\n                if (card.cardNumber != cn) {\n                    console.warn('SICard10 Error: SI Card Number inconsistency');\n                }\n\n                card.startTime = arr2time(page0.slice(14, 16));\n                card.finishTime = arr2time(page0.slice(18, 20));\n                card.checkTime = arr2time(page0.slice(10, 12));\n                len = Math.min(Math.max(page0[22], 0), 128);\n                card.punches = new Array(len);\n\n                return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x04], 1);\n            })\n            .then((data4) => {\n                console.assert(data4[0][2] === 4, 'Inconsistent');\n                const page4 = data4[0].slice(3);\n                const is4LastBlock = readSiCard10TimeBlock(page4, card.punches, 0, len);\n                if (is4LastBlock) {\n                    return card.mainStation._sendCommand(proto.ACK, [], 0).then(() => card);\n                }\n                return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x05], 1).then((data5) => {\n                    console.assert(data5[0][2] === 5, 'Inconsistent');\n                    const page5 = data5[0].slice(3);\n                    const is5LastBlock = readSiCard10TimeBlock(page5, card.punches, 1, len);\n                    if (is5LastBlock) {\n                        return card.mainStation._sendCommand(proto.ACK, [], 0).then(() => card);\n                    }\n                    return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x06], 1).then((data6) => {\n                        console.assert(data6[0][2] === 6, 'Inconsistent');\n                        const page6 = data6[0].slice(3);\n                        const is6LastBlock = readSiCard10TimeBlock(page6, card.punches, 2, len);\n                        if (is6LastBlock) {\n                            return card.mainStation._sendCommand(proto.ACK, [], 0).then(() => card);\n                        }\n                        return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x07], 1).then((data7) => {\n                            console.assert(data7[0][2] === 7, 'Inconsistent');\n                            const page7 = data7[0].slice(3);\n                            readSiCard10TimeBlock(page7, card.punches, 3, len);\n                            return card.mainStation._sendCommand(proto.ACK, [], 0).then(() => card);\n                        });\n                    });\n                });\n            });\n    }},\n    SICard11: {vals: [9000000, 10000000], description: 'SI Card 11', read: (card) => {\n        const readSiCard11TimeBlock = (blockData, punchData, blockIndex, punchCount) => {\n            let isLastBlock = false;\n            const punchesPerBlock = 32;\n            for (let i = 0; i < punchesPerBlock; i++) {\n                if (blockIndex * punchesPerBlock + i >= punchCount) {\n                    isLastBlock = true;\n                    break;\n                }\n                var time = arr2time(blockData.slice(i * 4 + 2, i * 4 + 4));\n                if (0 <= time) {\n                    punchData[blockIndex * punchesPerBlock + i] = {\n                        code: blockData[i * 4 + 1],\n                        time: time,\n                    };\n                } else {\n                    console.warn('SICard11 Error: Undefined Time in punched range');\n                }\n            }\n            return isLastBlock;\n        };\n        let len = undefined;\n        return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x00], 1)\n            .then((data0) => {\n                console.assert(data0[0][2] === 0, 'Inconsistent');\n                const page0 = data0[0].slice(3);\n                var cn = arr2big([page0[25], page0[26], page0[27]]);\n                if (card.cardNumber != cn) {\n                    console.warn('SICard11 Error: SI Card Number inconsistency');\n                }\n\n                card.startTime = arr2time(page0.slice(14, 16));\n                card.finishTime = arr2time(page0.slice(18, 20));\n                card.checkTime = arr2time(page0.slice(10, 12));\n                len = Math.min(Math.max(page0[22], 0), 128);\n                card.punches = new Array(len);\n\n                return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x04], 1);\n            })\n            .then((data4) => {\n                console.assert(data4[0][2] === 4, 'Inconsistent');\n                const page4 = data4[0].slice(3);\n                const is4LastBlock = readSiCard11TimeBlock(page4, card.punches, 0, len);\n                if (is4LastBlock) {\n                    return card.mainStation._sendCommand(proto.ACK, [], 0).then(() => card);\n                }\n                return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x05], 1).then((data5) => {\n                    console.assert(data5[0][2] === 5, 'Inconsistent');\n                    const page5 = data5[0].slice(3);\n                    const is5LastBlock = readSiCard11TimeBlock(page5, card.punches, 1, len);\n                    if (is5LastBlock) {\n                        return card.mainStation._sendCommand(proto.ACK, [], 0).then(() => card);\n                    }\n                    return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x06], 1).then((data6) => {\n                        console.assert(data6[0][2] === 6, 'Inconsistent');\n                        const page6 = data6[0].slice(3);\n                        const is6LastBlock = readSiCard11TimeBlock(page6, card.punches, 2, len);\n                        if (is6LastBlock) {\n                            return card.mainStation._sendCommand(proto.ACK, [], 0).then(() => card);\n                        }\n                        return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x07], 1).then((data7) => {\n                            console.assert(data7[0][2] === 7, 'Inconsistent');\n                            const page7 = data7[0].slice(3);\n                            readSiCard11TimeBlock(page7, card.punches, 3, len);\n                            return card.mainStation._sendCommand(proto.ACK, [], 0).then(() => card);\n                        });\n                    });\n                });\n            });\n    }},\n    SIAC: {vals: [8000000, 9000000], description: 'SIAC', read: (card) => {\n        const readSIACTimeBlock = (blockData, punchData, blockIndex, punchCount) => {\n            let isLastBlock = false;\n            const punchesPerBlock = 32;\n            for (let i = 0; i < punchesPerBlock; i++) {\n                if (blockIndex * punchesPerBlock + i >= punchCount) {\n                    isLastBlock = true;\n                    break;\n                }\n                var time = arr2time(blockData.slice(i * 4 + 2, i * 4 + 4));\n                if (0 <= time) {\n                    punchData[blockIndex * punchesPerBlock + i] = {\n                        code: blockData[i * 4 + 1],\n                        time: time,\n                    };\n                } else {\n                    console.warn('SIAC Error: Undefined Time in punched range');\n                }\n            }\n            return isLastBlock;\n        };\n        let len = undefined;\n        return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x00], 1)\n            .then((data0) => {\n                console.assert(data0[0][2] === 0, 'Inconsistent');\n                const page0 = data0[0].slice(3);\n                var cn = arr2big([page0[25], page0[26], page0[27]]);\n                if (card.cardNumber != cn) {\n                    console.warn('SIAC Error: SI Card Number inconsistency');\n                }\n\n                card.startTime = arr2time(page0.slice(14, 16));\n                card.finishTime = arr2time(page0.slice(18, 20));\n                card.checkTime = arr2time(page0.slice(10, 12));\n                len = Math.min(Math.max(page0[22], 0), 128);\n                card.punches = new Array(len);\n\n                return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x04], 1);\n            })\n            .then((data4) => {\n                console.assert(data4[0][2] === 4, 'Inconsistent');\n                const page4 = data4[0].slice(3);\n                const is4LastBlock = readSIACTimeBlock(page4, card.punches, 0, len);\n                if (is4LastBlock) {\n                    return card.mainStation._sendCommand(proto.ACK, [], 0).then(() => card);\n                }\n                return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x05], 1).then((data5) => {\n                    console.assert(data5[0][2] === 5, 'Inconsistent');\n                    const page5 = data5[0].slice(3);\n                    const is5LastBlock = readSIACTimeBlock(page5, card.punches, 1, len);\n                    if (is5LastBlock) {\n                        return card.mainStation._sendCommand(proto.ACK, [], 0).then(() => card);\n                    }\n                    return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x06], 1).then((data6) => {\n                        console.assert(data6[0][2] === 6, 'Inconsistent');\n                        const page6 = data6[0].slice(3);\n                        const is6LastBlock = readSIACTimeBlock(page6, card.punches, 2, len);\n                        if (is6LastBlock) {\n                            return card.mainStation._sendCommand(proto.ACK, [], 0).then(() => card);\n                        }\n                        return card.mainStation._sendCommand(proto.cmd.GET_SI8, [0x07], 1).then((data7) => {\n                            console.assert(data7[0][2] === 7, 'Inconsistent');\n                            const page7 = data7[0].slice(3);\n                            readSIACTimeBlock(page7, card.punches, 3, len);\n                            return card.mainStation._sendCommand(proto.ACK, [], 0).then(() => card);\n                        });\n                    });\n                });\n            });\n    }},\n    PCard: {vals: [4000000, 5000000], description: 'pCard', read: (_card) => undefined},\n    TCard: {vals: [6000000, 7000000], description: 'tCard', read: (_card) => undefined},\n    FCard: {vals: [14000000, 15000000], description: 'fCard', read: (_card) => undefined},\n};\n\nSiCard.typeByCardNumber = (cn) => {\n    if (!SiCard._typeLookup) {\n        SiCard._typeLookup = {borderList: [], borderLookup: {}};\n        Object.keys(SiCard.Type).map((k) => {\n            var vals = SiCard.Type[k].vals;\n            if ((vals.length % 2) != 0) {\n                throw new Error(`SiCard.Type.${k}: vals length is ${vals.length}?!? (must be even)`);\n            }\n            var lastEvenVal = 0;\n            for (var i = 0; i < vals.length; i++) {\n                var borderList = SiCard._typeLookup.borderList;\n                let j;\n                for (j = 0; j < borderList.length && borderList[j] < vals[i]; j++) {\n                    // TODO: binary search here\n                }\n                var borderExisted = (SiCard._typeLookup.borderList[j] == vals[i]);\n                if (!borderExisted) { SiCard._typeLookup.borderList.splice(j, 0, vals[i]); }\n                if ((i % 2) == 0) {\n                    let collidingRange;\n                    if (borderExisted) {\n                        collidingRange = SiCard._typeLookup.borderLookup[vals[i]];\n                        if (collidingRange) {\n                            throw new Error(`SiCard.Type.${k}: ${vals[i]} would collide with ${collidingRange}`);\n                        }\n                    }\n                    if (!borderExisted && 0 < j) {\n                        collidingRange = SiCard._typeLookup.borderLookup[SiCard._typeLookup.borderList[j - 1]];\n                        if (collidingRange) {\n                            throw new Error(`SiCard.Type.${k}: ${vals[i]} would collide with ${collidingRange}`);\n                        }\n                    }\n                    SiCard._typeLookup.borderLookup[vals[i]] = k;\n                    lastEvenVal = vals[i];\n                } else {\n                    if (lastEvenVal != SiCard._typeLookup.borderList[j - 1]) {\n                        throw new Error(`SiCard.Type.${k}: ${vals[i]} is not an immediate follow-up of ${lastEvenVal}`);\n                    }\n                    if (!SiCard._typeLookup.borderLookup[vals[i]]) { SiCard._typeLookup.borderLookup[vals[i]] = false; }\n                }\n            }\n        });\n    }\n    let j;\n    for (j = 0; j < SiCard._typeLookup.borderList.length && SiCard._typeLookup.borderList[j] <= cn; j++) {\n        // TODO: binary search here\n    }\n    if (j == 0) { return false; }\n    return SiCard._typeLookup.borderLookup[SiCard._typeLookup.borderList[j - 1]];\n};\n","export class BaseDriver {\n    get name() {\n        throw new Error('Driver must implement name getter');\n    }\n\n    new(_MainStation) {\n        throw new Error('Driver must implement \"new\" method');\n    }\n\n    detect(_MainStation) {\n        throw new Error('Driver must implement \"detect\" method');\n    }\n\n    open(_mainStation) {\n        throw new Error('Driver must implement \"open\" method');\n    }\n\n    close(_mainStation) {\n        throw new Error('Driver must implement \"close\" method');\n    }\n\n    send(_mainStation, _buffer) {\n        throw new Error('Driver must implement \"send\" method');\n    }\n}\n","import {BaseDriver} from './BaseDriver';\n\nconst siConfiguration = 1;\nconst siInterface = 0;\nconst siAlternate = 0;\nconst siEndpoint = 1;\nconst siPacketSize = 64;\nconst siDeviceFilters = [\n    {vendorId: 0x10c4, productId: 0x800a},\n];\n\n\nexport class WebUsb extends BaseDriver {\n    get name() {\n        return 'WebUSB';\n    }\n\n    new(MainStation) {\n        if (!('usb' in navigator)) {\n            return;\n        }\n        navigator.usb.requestDevice({\n            filters: siDeviceFilters,\n        })\n            .then((selectedDevice) => {\n                if (!(`USB-${selectedDevice.serialNumber}` in MainStation.allByDevice)) {\n                    new MainStation({\n                        ident: `USB-${selectedDevice.serialNumber}`,\n                        name: selectedDevice.productName,\n                        driver: this,\n                        _device: selectedDevice,\n                    });\n                }\n            });\n    }\n\n    detect(MainStation) {\n        if (!('usb' in navigator)) {\n            return;\n        }\n        navigator.usb.getDevices().then((devices) => {\n            devices.map((device) => {\n                const matchesSiDeviceFilter = siDeviceFilters.findIndex((filter) =>\n                    device.vendorId === filter.vendorId && device.productId === filter.productId) !== -1;\n                if (matchesSiDeviceFilter) {\n                    if (!(`USB-${device.serialNumber}` in MainStation.allByDevice)) {\n                        new MainStation({\n                            ident: `USB-${device.serialNumber}`,\n                            name: device.productName,\n                            driver: this,\n                            _device: device,\n                        });\n                    }\n                }\n            });\n        });\n    }\n\n    open(mainStation) {\n        return new Promise((resolve, _reject) => {\n            const dev = mainStation.device._device;\n\n            mainStation.device._receiveLoop = () => {\n                dev.transferIn(siEndpoint, siPacketSize)\n                    .then((response) => {\n                        mainStation.device._receiveLoop();\n                        var bufView = new Uint8Array(response.data.buffer);\n                        mainStation._logReceive(bufView);\n                        for (var i = 0; i < bufView.length; i++) { mainStation._respBuffer.push(bufView[i]); }\n                        mainStation._processRespBuffer();\n                    })\n                    .catch((err) => {\n                        console.warn(err);\n                        mainStation._remove();\n                    });\n            };\n\n            console.debug('Opening...', mainStation.device);\n            dev.open()\n                .then(() => {\n                    console.debug('Resetting...', dev);\n                    return dev.reset();\n                })\n                .then(() => {\n                    console.debug('Selecting Configuration...', dev);\n                    return dev.selectConfiguration(siConfiguration);\n                })\n                .then(() => {\n                    console.debug('Claiming Interface...', dev);\n                    return dev.claimInterface(siInterface);\n                })\n                .then(() => {\n                    console.debug('Selection Alternate Interface...', dev);\n                    return dev.selectAlternateInterface(siInterface, siAlternate);\n                })\n                .then(() => {\n                    console.debug('Enabling Serial...');\n                    return dev.controlTransferOut({\n                        requestType: 'vendor',\n                        recipient: 'interface',\n                        request: 0x00,\n                        value: 0x01,\n                        index: siInterface,\n                    });\n                })\n                .then(() => {\n                    console.debug('Setting Baudrate...');\n                    return dev.controlTransferOut({\n                        requestType: 'vendor',\n                        recipient: 'interface',\n                        request: 0x1E,\n                        value: 0x00,\n                        index: siInterface,\n                    }, new Uint8Array([0x00, 0x96, 0x00, 0x00]).buffer);\n                })\n                .then(() => {\n                    console.debug('Starting Receive Loop...');\n                    mainStation.device._receiveLoop();\n                    resolve();\n                });\n        });\n    }\n\n    close(mainStation) {\n        return new Promise((resolve, _reject) => {\n            const dev = mainStation.device._device;\n            console.debug('Disabling Serial...');\n            dev.controlTransferOut({\n                requestType: 'vendor',\n                recipient: 'interface',\n                request: 0x00,\n                value: 0x00,\n                index: siInterface,\n            })\n                .then(() => {\n                    console.debug('Releasing Interface...');\n                    return dev.releaseInterface(siInterface);\n                })\n                .then(() => {\n                    console.debug('Closing Device...');\n                    return dev.close();\n                })\n                .then(() => {\n                    resolve();\n                });\n        });\n    }\n\n    send(mainStation, buffer) {\n        const dev = mainStation.device._device;\n        return dev.transferOut(siEndpoint, buffer);\n    }\n}\n\nexport default WebUsb;\n","export {default as WebUsb} from './WebUsb';\n","import {arr2big, CRC16, prettyHex} from './utils';\nimport {proto} from './constants';\nimport {SiCard} from './SiCard';\nimport {SiStation} from './SiStation';\nimport * as drivers from './drivers';\n\nexport class SiMainStation extends SiStation {\n    constructor(device, state = SiMainStation.State.Uninitialized) {\n        super(null);\n        this.mainStation = this;\n        this.device = device;\n        this.card = false;\n        this.onRemoved = false;\n        this.onStateChanged = false;\n        this.onCardInserted = false;\n        this.onCard = false;\n        this.onCardRemoved = false;\n        this._sendQueue = [];\n        this._respBuffer = [];\n        this._deviceOpenTimer = false;\n        this._deviceOpenNumErrors = 0;\n        this.state = state;\n        if (!SiMainStation.allByDevice[device.ident]) {\n            SiMainStation.allByDevice[device.ident] = this;\n            try {\n                SiMainStation.onAdded(this);\n            } catch (err) {\n                // ignore\n            }\n        }\n        if (this.state == SiMainStation.State.Uninitialized) {\n            this._deviceOpen();\n        }\n    }\n\n    resetCardCallbacks() {\n        this.onCardInserted = false;\n        this.onCard = false;\n        this.onCardRemoved = false;\n    }\n\n    _changeState(newState) {\n        this.state = newState;\n        if (this.onStateChanged) {\n            this.onStateChanged(this.state);\n        }\n    }\n\n    _deviceOpen() {\n        this.device.driver.open(this)\n            .then(() => {\n                this._deviceOpenNumErrors = 0;\n                this._sendCommand(proto.cmd.GET_MS, [0x00], 1, 5)\n                    .then(() => {\n                        this._changeState(SiMainStation.State.Ready);\n                    })\n                    .catch((err) => {\n                        this._changeState(SiMainStation.State.Uninitialized);\n                        console.error('Could not communicate after having opened SiMainStation: ', err);\n                        this._retryDeviceOpen();\n                    });\n            })\n            .catch((err) => {\n                console.error('Could not open SiMainStation: ', err);\n                this._retryDeviceOpen();\n            });\n    }\n\n    _retryDeviceOpen() {\n        var scheduleReopen = () => {\n            if (!this._deviceOpenTimer) {\n                var timeout = 100;\n                for (var i = 0; i < this._deviceOpenNumErrors && i < 10; i++) { timeout = timeout * 2; }\n                this._deviceOpenTimer = window.setTimeout(() => {\n                    this._deviceOpenTimer = false;\n                    this._deviceOpen();\n                }, timeout);\n                this._deviceOpenNumErrors++;\n            }\n        };\n        this.device.driver.close(this)\n            .then(() => {\n                scheduleReopen();\n            })\n            .catch((err) => {\n                console.error('Could not close device: ', err);\n                scheduleReopen();\n            });\n    }\n\n    _logReceive(bufView) {\n        console.debug(`<= ${prettyHex(bufView)}     (${this.device.driver.name})`);\n    }\n\n    _processRespBuffer() {\n        while (0 < this._respBuffer.length) {\n            if (this._respBuffer[0] == proto.ACK) {\n                this._respBuffer.splice(0, 1);\n            } else if (this._respBuffer[0] == proto.NAK) {\n                this._respBuffer.splice(0, 1);\n                if (0 < this._sendQueue.length && this._sendQueue[0].state != -1) {\n                    if (this._sendQueue[0].timeoutTimer) { window.clearTimeout(this._sendQueue[0].timeoutTimer); }\n                    this._sendQueue[0].reject('NAK');\n                    this._sendQueue.shift();\n                }\n            } else if (this._respBuffer[0] == proto.WAKEUP) {\n                this._respBuffer.splice(0, 1);\n            } else if (this._respBuffer[0] == proto.STX) {\n                if (this._respBuffer.length < 6) { break; }\n                var command = this._respBuffer[1];\n                var len = this._respBuffer[2];\n                if (this._respBuffer.length < 6 + len) { break; }\n                if (this._respBuffer[5 + len] != proto.ETX) {\n                    console.warn('Invalid end byte. Flushing buffer.');\n                    this._respBuffer = [];\n                    break;\n                }\n                var parameters = this._respBuffer.slice(3, 3 + len);\n                var crcContent = CRC16(this._respBuffer.slice(1, 3 + len));\n                var crc = this._respBuffer.slice(3 + len, 5 + len);\n                this._respBuffer.splice(0, 6 + len);\n                if (crc[0] == crcContent[0] && crc[1] == crcContent[1]) {\n                    // console.debug(\"Valid Command received.  CMD:0x\"+prettyHex([command])+\" LEN:\"+len+\"  PARAMS:\"+prettyHex(parameters)+\" CRC:\"+prettyHex(crc)+\" Content-CRC:\"+prettyHex(crcContent));\n                    let cn, typeFromCN;\n                    if (command == proto.cmd.SI5_DET) {\n                        cn = arr2big([parameters[3], parameters[4], parameters[5]]);\n                        if (499999 < cn) { console.warn(`card5 Error: SI Card Number inconsistency: SI5 detected, but number is ${cn} (not in 0 - 500'000)`); }\n                        if (parameters[3] < 2) { cn = arr2big([parameters[4], parameters[5]]); } else { cn = parameters[3] * 100000 + arr2big([parameters[4], parameters[5]]); }\n                        this.card = new SiCard(this, cn);\n                        console.log('SI5 DET', this.card, parameters);\n                        window.setTimeout(() => {\n                            if (this.onCardInserted) { this.onCardInserted(this.card); }\n                        }, 1);\n                        this.card.read()\n                            .then((card) => {\n                                if (this.onCard) {\n                                    this.onCard(card);\n                                }\n                            });\n                    } else if (command == proto.cmd.SI6_DET) {\n                        cn = arr2big([parameters[3], parameters[4], parameters[5]]);\n                        typeFromCN = SiCard.typeByCardNumber(cn);\n                        if (typeFromCN != 'SICard6') { console.warn(`SICard6 Error: SI Card Number inconsistency: Function SI6 called, but number is ${cn} (=> ${typeFromCN})`); }\n                        this.card = new SiCard(this, cn);\n                        console.log('SI6 DET', parameters);\n                        window.setTimeout(() => {\n                            if (this.onCardInserted) { this.onCardInserted(this.card); }\n                        }, 1);\n                        this.card.read()\n                            .then((card) => {\n                                if (this.onCard) {\n                                    this.onCard(card);\n                                }\n                            });\n                    } else if (command == proto.cmd.SI8_DET) {\n                        cn = arr2big([parameters[3], parameters[4], parameters[5]]);\n                        typeFromCN = SiCard.typeByCardNumber(cn);\n                        if (!{'SICard8': 1, 'SICard9': 1, 'SICard10': 1, 'SICard11': 1}[typeFromCN]) { console.warn(`SICard8 Error: SI Card Number inconsistency: Function SI8 called, but number is ${cn} (=> ${typeFromCN})`); }\n                        this.card = new SiCard(this, cn);\n                        console.log('SI8 DET', parameters);\n                        window.setTimeout(() => {\n                            if (this.onCardInserted) { this.onCardInserted(this.card); }\n                        }, 1);\n                        this.card.read()\n                            .then((card) => {\n                                if (this.onCard) {\n                                    this.onCard(card);\n                                }\n                            });\n                    } else if (command == proto.cmd.SI_REM) {\n                        console.log('SI REM', parameters);\n                        if (0 < this._sendQueue.length && this._sendQueue[0].state != -1 && 0xB0 <= this._sendQueue[0].command && this._sendQueue[0].command <= 0xEF) { // Was expecting response from card => \"early Timeout\"\n                            if (this._sendQueue[0].timeoutTimer) { window.clearTimeout(this._sendQueue[0].timeoutTimer); }\n                            this._sendQueue[0].reject('TIMEOUT');\n                            console.debug(`Early Timeout: cmd ${prettyHex([this._sendQueue[0].command])} (expected ${this._sendQueue[0].numResp} responses)`, this._sendQueue[0].bufResp);\n                            this._sendQueue.shift();\n                        }\n                        // this._sendCommand(proto.ACK, [], 0);\n                        window.setTimeout(() => {\n                            if (this.onCardRemoved) { this.onCardRemoved(this.card); }\n                        }, 1);\n                        this.card = false;\n                    } else if (command == proto.cmd.TRANS_REC) {\n                        cn = arr2big([parameters[3], parameters[4], parameters[5]]);\n                        if (cn < 500000) {\n                            if (parameters[3] < 2) { cn = arr2big([parameters[4], parameters[5]]); } else { cn = parameters[3] * 100000 + arr2big([parameters[4], parameters[5]]); }\n                        }\n                        this.card = new SiCard(this, cn);\n                        console.log('TRANS_REC', this.card, parameters);\n                        // this._sendCommand(proto.ACK, [], 0);\n                        if (this.onCardInserted) {\n                            this.onCardInserted(this.card);\n                        }\n                        if (this.onCardRemoved) {\n                            this.onCardRemoved(this.card);\n                        }\n                        this.card = false;\n                    } else if (0 < this._sendQueue.length && this._sendQueue[0].state != -1) { // We are expecting a certain response\n                        if (this._sendQueue[0].command == command) { // It was, what we were expecting\n                            this._sendQueue[0].bufResp.push(parameters);\n                            if (this._sendQueue[0].bufResp.length == this._sendQueue[0].numResp) { // TODO: some kind of onProgress, or just call onSuccess with incomplete buf?\n                                if (this._sendQueue[0].timeoutTimer) {\n                                    window.clearTimeout(this._sendQueue[0].timeoutTimer);\n                                }\n                                this._sendQueue[0].resolve(this._sendQueue[0].bufResp);\n                                this._sendQueue.shift();\n                            }\n                            // Continue sending\n                            window.setTimeout(() => this._processSendQueue(), 1);\n                        } else {\n                            console.warn(`Strange Response: expected ${prettyHex([this._sendQueue[0].command])}, but got ${prettyHex([command])}...`);\n                        }\n                    } else {\n                        console.warn(`Strange Response: ${prettyHex([command])} (not expecting anything)...`);\n                    }\n                } else {\n                    console.debug(`Invalid Command received.  CMD:0x${prettyHex([command])} LEN:${len}  PARAMS:${prettyHex(parameters)} CRC:${prettyHex(crc)} Content-CRC:${prettyHex(crcContent)}`);\n                }\n            } else {\n                console.warn('Invalid start byte', this._respBuffer[0]);\n                this._respBuffer.splice(0, 1);\n            }\n        }\n    }\n\n    _processSendQueue() {\n        if (0 < this._sendQueue.length && this._sendQueue[0].state == -1) {\n            var request = this._sendQueue[0];\n            // Build command\n            var commandString = [request.command, request.parameters.length].concat(request.parameters);\n            var crc = CRC16(commandString);\n            var cmd = String.fromCharCode(proto.STX);\n            let i;\n            for (i = 0; i < commandString.length; i++) {\n                cmd += String.fromCharCode(commandString[i]);\n            }\n            for (i = 0; i < crc.length; i++) {\n                cmd += String.fromCharCode(crc[i]);\n            }\n            cmd += String.fromCharCode(proto.ETX);\n\n            // Send command\n            var bstr = String.fromCharCode(proto.WAKEUP) + cmd;\n            var bytes = new Uint8Array(bstr.length);\n            for (i = 0; i < bstr.length; i++) {\n                bytes[i] = bstr.charCodeAt(i);\n            }\n            this.device.driver.send(this, bytes.buffer)\n                .then(() => {\n                    console.debug(`=> ${prettyHex(bstr)}     (${this.device.driver.name})`);\n\n                    // Response handling setup\n                    if (request.numResp <= 0) {\n                        request.resolve([]);\n                        this._sendQueue.shift();\n                        window.setTimeout(() => this._processSendQueue(), 1);\n                    }\n                })\n                .catch((err) => {\n                    console.warn(err);\n                    request.state = -1;\n                });\n            request.state = 0;\n        }\n    }\n\n    _sendCommand(command, parameters, numRespArg, timeoutArg) {\n        return new Promise((resolve, reject) => {\n            // Default values\n            const numResp = numRespArg ? numRespArg : 0;\n            const timeout = timeoutArg ? timeoutArg : 10;\n\n            const sendTask = {\n                command: command,\n                parameters: parameters,\n                numResp: numResp,\n                resolve: resolve,\n                reject: reject,\n                timeout: timeout,\n                state: -1,\n                timeoutTimer: undefined,\n                bufResp: [],\n            };\n\n            sendTask.timeoutTimer = window.setTimeout(() => {\n                if (0 < this._sendQueue.length && this._sendQueue[0] === sendTask) {\n                    window.clearTimeout(sendTask.timeoutTimer);\n                    sendTask.reject('TIMEOUT');\n                    console.debug(`Timeout: cmd ${prettyHex([sendTask.command])} (expected ${sendTask.numResp} responses)`, sendTask.bufResp);\n                    this._sendQueue.shift();\n                    window.setTimeout(() => {\n                        this._processSendQueue();\n                    }, 1);\n                }\n            }, timeout * 1000);\n\n            // Add to Queue\n            this._sendQueue.push(sendTask); // State: -1=notYetStarted, 0=sentButNoResp, X=XRespReceived\n            this._processSendQueue();\n        });\n    }\n\n    _remove() {\n        if (0 < this._sendQueue.length && this._sendQueue[0].state != -1) {\n            window.clearTimeout(this._sendQueue[0].timeoutTimer);\n        }\n        window.clearTimeout(this._deviceOpenTimer);\n        delete SiMainStation.allByDevice[this.device.ident];\n        try {\n            SiMainStation.onRemoved(this);\n        } catch (err) {\n            // ignore\n        }\n        try {\n            this.onRemoved();\n        } catch (err) {\n            // ignore\n        }\n    }\n}\n\nSiMainStation.State = { // TODO: maybe include instructions in description?\n    Uninitialized: {val: 1, description: 'This SiMainStation is not yet initialized. Commands can neither be received nor sent yet.'},\n    Ready: {val: 2, description: 'This SiMainStation is initialized and ready. Commands can be received and sent.'},\n};\n\nSiMainStation.allByDevice = {};\nSiMainStation.all = () => {\n    var arr = [];\n    Object.keys(SiMainStation.allByDevice).map((deviceIdent) => {\n        arr.push(SiMainStation.allByDevice[deviceIdent]);\n    });\n    return arr;\n};\nSiMainStation.startDeviceDetection = () => {\n    var runDeviceDetection = () => {\n        Object.keys(drivers).map((k) => {\n            try {\n                var driver = new drivers[k]();\n                if (driver && driver.name && driver.detect && driver.send && driver.open && driver.close) {\n                    driver.detect(SiMainStation);\n                } else {\n                    console.warn('Not a driver:', k);\n                }\n            } catch (err) {\n                console.warn('Error in device detection:', err);\n            }\n        });\n        if (SiMainStation.detectionTimeout) { window.clearTimeout(SiMainStation.detectionTimeout); }\n        SiMainStation.detectionTimeout = window.setTimeout(runDeviceDetection, 1000);\n    };\n    runDeviceDetection();\n};\nSiMainStation.newDevice = () => {\n    Object.keys(drivers).map((k) => {\n        try {\n            var driver = new drivers[k]();\n            if (driver && driver.name && driver.detect && driver.send && driver.open && driver.close) {\n                driver.new(SiMainStation);\n            } else {\n                console.warn('Not a driver:', k);\n            }\n        } catch (err) {\n            console.warn('Error in device detection:', err);\n        }\n    });\n};\nSiMainStation.onAdded = (_ms) => undefined;\nSiMainStation.onRemoved = (_ms) => undefined;\n","/* global si */\n/* exported si */\n\nimport * as constants from './constants';\nimport * as utils from './utils';\nimport {SiCard} from './SiCard';\nimport {SiStation} from './SiStation';\nimport {SiMainStation} from './SiMainStation';\n\nexport const si = {\n    constants: constants,\n    utils: utils,\n    Station: SiStation,\n    MainStation: SiMainStation,\n    Card: SiCard,\n    onLoad: () => undefined,\n};\n\nwindow.addEventListener('load', () => {\n    SiMainStation.startDeviceDetection();\n    if (si.onLoad) {\n        si.onLoad();\n    }\n}, true);\n\nexport default si;\n\nwindow.si = si;\n"],"sourceRoot":""}